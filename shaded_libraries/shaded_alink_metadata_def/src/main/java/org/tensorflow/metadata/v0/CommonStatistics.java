// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statistics.proto

package org.tensorflow.metadata.v0;

/**
 * <pre>
 * Common statistics for all feature types. Statistics counting number of values
 * (i.e., min_num_values, max_num_values, avg_num_values, and tot_num_values)
 * include NaNs.
 * </pre>
 *
 * Protobuf type {@code tensorflow.metadata.v0.CommonStatistics}
 */
public final class CommonStatistics extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.metadata.v0.CommonStatistics)
    CommonStatisticsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CommonStatistics.newBuilder() to construct.
  private CommonStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CommonStatistics() {
    presenceAndValencyStats_ = java.util.Collections.emptyList();
    weightedPresenceAndValencyStats_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new CommonStatistics();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CommonStatistics(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            numNonMissing_ = input.readUInt64();
            break;
          }
          case 16: {

            numMissing_ = input.readUInt64();
            break;
          }
          case 24: {

            minNumValues_ = input.readUInt64();
            break;
          }
          case 32: {

            maxNumValues_ = input.readUInt64();
            break;
          }
          case 45: {

            avgNumValues_ = input.readFloat();
            break;
          }
          case 50: {
            Histogram.Builder subBuilder = null;
            if (numValuesHistogram_ != null) {
              subBuilder = numValuesHistogram_.toBuilder();
            }
            numValuesHistogram_ = input.readMessage(Histogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(numValuesHistogram_);
              numValuesHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            WeightedCommonStatistics.Builder subBuilder = null;
            if (weightedCommonStats_ != null) {
              subBuilder = weightedCommonStats_.toBuilder();
            }
            weightedCommonStats_ = input.readMessage(WeightedCommonStatistics.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(weightedCommonStats_);
              weightedCommonStats_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {

            totNumValues_ = input.readUInt64();
            break;
          }
          case 74: {
            Histogram.Builder subBuilder = null;
            if (featureListLengthHistogram_ != null) {
              subBuilder = featureListLengthHistogram_.toBuilder();
            }
            featureListLengthHistogram_ = input.readMessage(Histogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(featureListLengthHistogram_);
              featureListLengthHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              presenceAndValencyStats_ = new java.util.ArrayList<PresenceAndValencyStatistics>();
              mutable_bitField0_ |= 0x00000001;
            }
            presenceAndValencyStats_.add(
                input.readMessage(PresenceAndValencyStatistics.parser(), extensionRegistry));
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              weightedPresenceAndValencyStats_ = new java.util.ArrayList<WeightedCommonStatistics>();
              mutable_bitField0_ |= 0x00000002;
            }
            weightedPresenceAndValencyStats_.add(
                input.readMessage(WeightedCommonStatistics.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        presenceAndValencyStats_ = java.util.Collections.unmodifiableList(presenceAndValencyStats_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        weightedPresenceAndValencyStats_ = java.util.Collections.unmodifiableList(weightedPresenceAndValencyStats_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Statistics.internal_static_tensorflow_metadata_v0_CommonStatistics_descriptor;
  }

  @Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Statistics.internal_static_tensorflow_metadata_v0_CommonStatistics_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            CommonStatistics.class, Builder.class);
  }

  public static final int NUM_NON_MISSING_FIELD_NUMBER = 1;
  private long numNonMissing_;
  /**
   * <pre>
   * The number of examples with at least one value for this feature.
   * </pre>
   *
   * <code>uint64 num_non_missing = 1;</code>
   * @return The numNonMissing.
   */
  @Override
  public long getNumNonMissing() {
    return numNonMissing_;
  }

  public static final int NUM_MISSING_FIELD_NUMBER = 2;
  private long numMissing_;
  /**
   * <pre>
   * The number of examples with no values for this feature.
   * </pre>
   *
   * <code>uint64 num_missing = 2;</code>
   * @return The numMissing.
   */
  @Override
  public long getNumMissing() {
    return numMissing_;
  }

  public static final int MIN_NUM_VALUES_FIELD_NUMBER = 3;
  private long minNumValues_;
  /**
   * <pre>
   * The minimum number of values in a single example for this feature.
   * </pre>
   *
   * <code>uint64 min_num_values = 3;</code>
   * @return The minNumValues.
   */
  @Override
  public long getMinNumValues() {
    return minNumValues_;
  }

  public static final int MAX_NUM_VALUES_FIELD_NUMBER = 4;
  private long maxNumValues_;
  /**
   * <pre>
   * The maximum number of values in a single example for this feature.
   * </pre>
   *
   * <code>uint64 max_num_values = 4;</code>
   * @return The maxNumValues.
   */
  @Override
  public long getMaxNumValues() {
    return maxNumValues_;
  }

  public static final int AVG_NUM_VALUES_FIELD_NUMBER = 5;
  private float avgNumValues_;
  /**
   * <pre>
   * The average number of values in a single example for this feature.
   * </pre>
   *
   * <code>float avg_num_values = 5;</code>
   * @return The avgNumValues.
   */
  @Override
  public float getAvgNumValues() {
    return avgNumValues_;
  }

  public static final int TOT_NUM_VALUES_FIELD_NUMBER = 8;
  private long totNumValues_;
  /**
   * <pre>
   * tot_num_values = avg_num_values * num_non_missing.
   * This is calculated directly, so should have less numerical error.
   * </pre>
   *
   * <code>uint64 tot_num_values = 8;</code>
   * @return The totNumValues.
   */
  @Override
  public long getTotNumValues() {
    return totNumValues_;
  }

  public static final int NUM_VALUES_HISTOGRAM_FIELD_NUMBER = 6;
  private Histogram numValuesHistogram_;
  /**
   * <pre>
   * The quantiles histogram for the number of values in this feature.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
   * @return Whether the numValuesHistogram field is set.
   */
  @Override
  public boolean hasNumValuesHistogram() {
    return numValuesHistogram_ != null;
  }
  /**
   * <pre>
   * The quantiles histogram for the number of values in this feature.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
   * @return The numValuesHistogram.
   */
  @Override
  public Histogram getNumValuesHistogram() {
    return numValuesHistogram_ == null ? Histogram.getDefaultInstance() : numValuesHistogram_;
  }
  /**
   * <pre>
   * The quantiles histogram for the number of values in this feature.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
   */
  @Override
  public HistogramOrBuilder getNumValuesHistogramOrBuilder() {
    return getNumValuesHistogram();
  }

  public static final int WEIGHTED_COMMON_STATS_FIELD_NUMBER = 7;
  private WeightedCommonStatistics weightedCommonStats_;
  /**
   * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
   * @return Whether the weightedCommonStats field is set.
   */
  @Override
  public boolean hasWeightedCommonStats() {
    return weightedCommonStats_ != null;
  }
  /**
   * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
   * @return The weightedCommonStats.
   */
  @Override
  public WeightedCommonStatistics getWeightedCommonStats() {
    return weightedCommonStats_ == null ? WeightedCommonStatistics.getDefaultInstance() : weightedCommonStats_;
  }
  /**
   * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
   */
  @Override
  public WeightedCommonStatisticsOrBuilder getWeightedCommonStatsOrBuilder() {
    return getWeightedCommonStats();
  }

  public static final int FEATURE_LIST_LENGTH_HISTOGRAM_FIELD_NUMBER = 9;
  private Histogram featureListLengthHistogram_;
  /**
   * <pre>
   * The histogram for the number of features in the feature list (only set if
   * this feature is a non-context feature from a tf.SequenceExample).
   * This is different from num_values_histogram, as num_values_histogram tracks
   * the count of all values for a feature in an example, whereas this tracks
   * the length of the feature list for this feature in an example (where each
   * feature list can contain multiple values).
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
   * @return Whether the featureListLengthHistogram field is set.
   */
  @Override
  public boolean hasFeatureListLengthHistogram() {
    return featureListLengthHistogram_ != null;
  }
  /**
   * <pre>
   * The histogram for the number of features in the feature list (only set if
   * this feature is a non-context feature from a tf.SequenceExample).
   * This is different from num_values_histogram, as num_values_histogram tracks
   * the count of all values for a feature in an example, whereas this tracks
   * the length of the feature list for this feature in an example (where each
   * feature list can contain multiple values).
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
   * @return The featureListLengthHistogram.
   */
  @Override
  public Histogram getFeatureListLengthHistogram() {
    return featureListLengthHistogram_ == null ? Histogram.getDefaultInstance() : featureListLengthHistogram_;
  }
  /**
   * <pre>
   * The histogram for the number of features in the feature list (only set if
   * this feature is a non-context feature from a tf.SequenceExample).
   * This is different from num_values_histogram, as num_values_histogram tracks
   * the count of all values for a feature in an example, whereas this tracks
   * the length of the feature list for this feature in an example (where each
   * feature list can contain multiple values).
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
   */
  @Override
  public HistogramOrBuilder getFeatureListLengthHistogramOrBuilder() {
    return getFeatureListLengthHistogram();
  }

  public static final int PRESENCE_AND_VALENCY_STATS_FIELD_NUMBER = 10;
  private java.util.List<PresenceAndValencyStatistics> presenceAndValencyStats_;
  /**
   * <pre>
   * Contains presence and valency stats for each nest level of the feature.
   * The first item corresponds to the outermost level, and by definition,
   * the stats it contains equals to the corresponding stats defined above.
   * May not be populated if the feature is of nest level 1.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
   */
  @Override
  public java.util.List<PresenceAndValencyStatistics> getPresenceAndValencyStatsList() {
    return presenceAndValencyStats_;
  }
  /**
   * <pre>
   * Contains presence and valency stats for each nest level of the feature.
   * The first item corresponds to the outermost level, and by definition,
   * the stats it contains equals to the corresponding stats defined above.
   * May not be populated if the feature is of nest level 1.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
   */
  @Override
  public java.util.List<? extends PresenceAndValencyStatisticsOrBuilder>
      getPresenceAndValencyStatsOrBuilderList() {
    return presenceAndValencyStats_;
  }
  /**
   * <pre>
   * Contains presence and valency stats for each nest level of the feature.
   * The first item corresponds to the outermost level, and by definition,
   * the stats it contains equals to the corresponding stats defined above.
   * May not be populated if the feature is of nest level 1.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
   */
  @Override
  public int getPresenceAndValencyStatsCount() {
    return presenceAndValencyStats_.size();
  }
  /**
   * <pre>
   * Contains presence and valency stats for each nest level of the feature.
   * The first item corresponds to the outermost level, and by definition,
   * the stats it contains equals to the corresponding stats defined above.
   * May not be populated if the feature is of nest level 1.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
   */
  @Override
  public PresenceAndValencyStatistics getPresenceAndValencyStats(int index) {
    return presenceAndValencyStats_.get(index);
  }
  /**
   * <pre>
   * Contains presence and valency stats for each nest level of the feature.
   * The first item corresponds to the outermost level, and by definition,
   * the stats it contains equals to the corresponding stats defined above.
   * May not be populated if the feature is of nest level 1.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
   */
  @Override
  public PresenceAndValencyStatisticsOrBuilder getPresenceAndValencyStatsOrBuilder(
      int index) {
    return presenceAndValencyStats_.get(index);
  }

  public static final int WEIGHTED_PRESENCE_AND_VALENCY_STATS_FIELD_NUMBER = 11;
  private java.util.List<WeightedCommonStatistics> weightedPresenceAndValencyStats_;
  /**
   * <pre>
   * If not empty, it's parallel to presence_and_valency_stats.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
   */
  @Override
  public java.util.List<WeightedCommonStatistics> getWeightedPresenceAndValencyStatsList() {
    return weightedPresenceAndValencyStats_;
  }
  /**
   * <pre>
   * If not empty, it's parallel to presence_and_valency_stats.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
   */
  @Override
  public java.util.List<? extends WeightedCommonStatisticsOrBuilder>
      getWeightedPresenceAndValencyStatsOrBuilderList() {
    return weightedPresenceAndValencyStats_;
  }
  /**
   * <pre>
   * If not empty, it's parallel to presence_and_valency_stats.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
   */
  @Override
  public int getWeightedPresenceAndValencyStatsCount() {
    return weightedPresenceAndValencyStats_.size();
  }
  /**
   * <pre>
   * If not empty, it's parallel to presence_and_valency_stats.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
   */
  @Override
  public WeightedCommonStatistics getWeightedPresenceAndValencyStats(int index) {
    return weightedPresenceAndValencyStats_.get(index);
  }
  /**
   * <pre>
   * If not empty, it's parallel to presence_and_valency_stats.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
   */
  @Override
  public WeightedCommonStatisticsOrBuilder getWeightedPresenceAndValencyStatsOrBuilder(
      int index) {
    return weightedPresenceAndValencyStats_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (numNonMissing_ != 0L) {
      output.writeUInt64(1, numNonMissing_);
    }
    if (numMissing_ != 0L) {
      output.writeUInt64(2, numMissing_);
    }
    if (minNumValues_ != 0L) {
      output.writeUInt64(3, minNumValues_);
    }
    if (maxNumValues_ != 0L) {
      output.writeUInt64(4, maxNumValues_);
    }
    if (Float.floatToRawIntBits(avgNumValues_) != 0) {
      output.writeFloat(5, avgNumValues_);
    }
    if (numValuesHistogram_ != null) {
      output.writeMessage(6, getNumValuesHistogram());
    }
    if (weightedCommonStats_ != null) {
      output.writeMessage(7, getWeightedCommonStats());
    }
    if (totNumValues_ != 0L) {
      output.writeUInt64(8, totNumValues_);
    }
    if (featureListLengthHistogram_ != null) {
      output.writeMessage(9, getFeatureListLengthHistogram());
    }
    for (int i = 0; i < presenceAndValencyStats_.size(); i++) {
      output.writeMessage(10, presenceAndValencyStats_.get(i));
    }
    for (int i = 0; i < weightedPresenceAndValencyStats_.size(); i++) {
      output.writeMessage(11, weightedPresenceAndValencyStats_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (numNonMissing_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, numNonMissing_);
    }
    if (numMissing_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(2, numMissing_);
    }
    if (minNumValues_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, minNumValues_);
    }
    if (maxNumValues_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, maxNumValues_);
    }
    if (Float.floatToRawIntBits(avgNumValues_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, avgNumValues_);
    }
    if (numValuesHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getNumValuesHistogram());
    }
    if (weightedCommonStats_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getWeightedCommonStats());
    }
    if (totNumValues_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(8, totNumValues_);
    }
    if (featureListLengthHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getFeatureListLengthHistogram());
    }
    for (int i = 0; i < presenceAndValencyStats_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, presenceAndValencyStats_.get(i));
    }
    for (int i = 0; i < weightedPresenceAndValencyStats_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, weightedPresenceAndValencyStats_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof CommonStatistics)) {
      return super.equals(obj);
    }
    CommonStatistics other = (CommonStatistics) obj;

    if (getNumNonMissing()
        != other.getNumNonMissing()) return false;
    if (getNumMissing()
        != other.getNumMissing()) return false;
    if (getMinNumValues()
        != other.getMinNumValues()) return false;
    if (getMaxNumValues()
        != other.getMaxNumValues()) return false;
    if (Float.floatToIntBits(getAvgNumValues())
        != Float.floatToIntBits(
            other.getAvgNumValues())) return false;
    if (getTotNumValues()
        != other.getTotNumValues()) return false;
    if (hasNumValuesHistogram() != other.hasNumValuesHistogram()) return false;
    if (hasNumValuesHistogram()) {
      if (!getNumValuesHistogram()
          .equals(other.getNumValuesHistogram())) return false;
    }
    if (hasWeightedCommonStats() != other.hasWeightedCommonStats()) return false;
    if (hasWeightedCommonStats()) {
      if (!getWeightedCommonStats()
          .equals(other.getWeightedCommonStats())) return false;
    }
    if (hasFeatureListLengthHistogram() != other.hasFeatureListLengthHistogram()) return false;
    if (hasFeatureListLengthHistogram()) {
      if (!getFeatureListLengthHistogram()
          .equals(other.getFeatureListLengthHistogram())) return false;
    }
    if (!getPresenceAndValencyStatsList()
        .equals(other.getPresenceAndValencyStatsList())) return false;
    if (!getWeightedPresenceAndValencyStatsList()
        .equals(other.getWeightedPresenceAndValencyStatsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NUM_NON_MISSING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNumNonMissing());
    hash = (37 * hash) + NUM_MISSING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNumMissing());
    hash = (37 * hash) + MIN_NUM_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinNumValues());
    hash = (37 * hash) + MAX_NUM_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMaxNumValues());
    hash = (37 * hash) + AVG_NUM_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getAvgNumValues());
    hash = (37 * hash) + TOT_NUM_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTotNumValues());
    if (hasNumValuesHistogram()) {
      hash = (37 * hash) + NUM_VALUES_HISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getNumValuesHistogram().hashCode();
    }
    if (hasWeightedCommonStats()) {
      hash = (37 * hash) + WEIGHTED_COMMON_STATS_FIELD_NUMBER;
      hash = (53 * hash) + getWeightedCommonStats().hashCode();
    }
    if (hasFeatureListLengthHistogram()) {
      hash = (37 * hash) + FEATURE_LIST_LENGTH_HISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getFeatureListLengthHistogram().hashCode();
    }
    if (getPresenceAndValencyStatsCount() > 0) {
      hash = (37 * hash) + PRESENCE_AND_VALENCY_STATS_FIELD_NUMBER;
      hash = (53 * hash) + getPresenceAndValencyStatsList().hashCode();
    }
    if (getWeightedPresenceAndValencyStatsCount() > 0) {
      hash = (37 * hash) + WEIGHTED_PRESENCE_AND_VALENCY_STATS_FIELD_NUMBER;
      hash = (53 * hash) + getWeightedPresenceAndValencyStatsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static CommonStatistics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CommonStatistics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CommonStatistics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CommonStatistics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CommonStatistics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CommonStatistics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CommonStatistics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static CommonStatistics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static CommonStatistics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static CommonStatistics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static CommonStatistics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static CommonStatistics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(CommonStatistics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Common statistics for all feature types. Statistics counting number of values
   * (i.e., min_num_values, max_num_values, avg_num_values, and tot_num_values)
   * include NaNs.
   * </pre>
   *
   * Protobuf type {@code tensorflow.metadata.v0.CommonStatistics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.metadata.v0.CommonStatistics)
      CommonStatisticsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Statistics.internal_static_tensorflow_metadata_v0_CommonStatistics_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Statistics.internal_static_tensorflow_metadata_v0_CommonStatistics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              CommonStatistics.class, Builder.class);
    }

    // Construct using org.tensorflow.metadata.v0.CommonStatistics.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPresenceAndValencyStatsFieldBuilder();
        getWeightedPresenceAndValencyStatsFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      numNonMissing_ = 0L;

      numMissing_ = 0L;

      minNumValues_ = 0L;

      maxNumValues_ = 0L;

      avgNumValues_ = 0F;

      totNumValues_ = 0L;

      if (numValuesHistogramBuilder_ == null) {
        numValuesHistogram_ = null;
      } else {
        numValuesHistogram_ = null;
        numValuesHistogramBuilder_ = null;
      }
      if (weightedCommonStatsBuilder_ == null) {
        weightedCommonStats_ = null;
      } else {
        weightedCommonStats_ = null;
        weightedCommonStatsBuilder_ = null;
      }
      if (featureListLengthHistogramBuilder_ == null) {
        featureListLengthHistogram_ = null;
      } else {
        featureListLengthHistogram_ = null;
        featureListLengthHistogramBuilder_ = null;
      }
      if (presenceAndValencyStatsBuilder_ == null) {
        presenceAndValencyStats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        presenceAndValencyStatsBuilder_.clear();
      }
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        weightedPresenceAndValencyStats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        weightedPresenceAndValencyStatsBuilder_.clear();
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Statistics.internal_static_tensorflow_metadata_v0_CommonStatistics_descriptor;
    }

    @Override
    public CommonStatistics getDefaultInstanceForType() {
      return CommonStatistics.getDefaultInstance();
    }

    @Override
    public CommonStatistics build() {
      CommonStatistics result = buildPartial();
      if (!result.isInitialized()) {
        throw Builder.newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public CommonStatistics buildPartial() {
      CommonStatistics result = new CommonStatistics(this);
      int from_bitField0_ = bitField0_;
      result.numNonMissing_ = numNonMissing_;
      result.numMissing_ = numMissing_;
      result.minNumValues_ = minNumValues_;
      result.maxNumValues_ = maxNumValues_;
      result.avgNumValues_ = avgNumValues_;
      result.totNumValues_ = totNumValues_;
      if (numValuesHistogramBuilder_ == null) {
        result.numValuesHistogram_ = numValuesHistogram_;
      } else {
        result.numValuesHistogram_ = numValuesHistogramBuilder_.build();
      }
      if (weightedCommonStatsBuilder_ == null) {
        result.weightedCommonStats_ = weightedCommonStats_;
      } else {
        result.weightedCommonStats_ = weightedCommonStatsBuilder_.build();
      }
      if (featureListLengthHistogramBuilder_ == null) {
        result.featureListLengthHistogram_ = featureListLengthHistogram_;
      } else {
        result.featureListLengthHistogram_ = featureListLengthHistogramBuilder_.build();
      }
      if (presenceAndValencyStatsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          presenceAndValencyStats_ = java.util.Collections.unmodifiableList(presenceAndValencyStats_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.presenceAndValencyStats_ = presenceAndValencyStats_;
      } else {
        result.presenceAndValencyStats_ = presenceAndValencyStatsBuilder_.build();
      }
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          weightedPresenceAndValencyStats_ = java.util.Collections.unmodifiableList(weightedPresenceAndValencyStats_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.weightedPresenceAndValencyStats_ = weightedPresenceAndValencyStats_;
      } else {
        result.weightedPresenceAndValencyStats_ = weightedPresenceAndValencyStatsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof CommonStatistics) {
        return mergeFrom((CommonStatistics)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(CommonStatistics other) {
      if (other == CommonStatistics.getDefaultInstance()) return this;
      if (other.getNumNonMissing() != 0L) {
        setNumNonMissing(other.getNumNonMissing());
      }
      if (other.getNumMissing() != 0L) {
        setNumMissing(other.getNumMissing());
      }
      if (other.getMinNumValues() != 0L) {
        setMinNumValues(other.getMinNumValues());
      }
      if (other.getMaxNumValues() != 0L) {
        setMaxNumValues(other.getMaxNumValues());
      }
      if (other.getAvgNumValues() != 0F) {
        setAvgNumValues(other.getAvgNumValues());
      }
      if (other.getTotNumValues() != 0L) {
        setTotNumValues(other.getTotNumValues());
      }
      if (other.hasNumValuesHistogram()) {
        mergeNumValuesHistogram(other.getNumValuesHistogram());
      }
      if (other.hasWeightedCommonStats()) {
        mergeWeightedCommonStats(other.getWeightedCommonStats());
      }
      if (other.hasFeatureListLengthHistogram()) {
        mergeFeatureListLengthHistogram(other.getFeatureListLengthHistogram());
      }
      if (presenceAndValencyStatsBuilder_ == null) {
        if (!other.presenceAndValencyStats_.isEmpty()) {
          if (presenceAndValencyStats_.isEmpty()) {
            presenceAndValencyStats_ = other.presenceAndValencyStats_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePresenceAndValencyStatsIsMutable();
            presenceAndValencyStats_.addAll(other.presenceAndValencyStats_);
          }
          onChanged();
        }
      } else {
        if (!other.presenceAndValencyStats_.isEmpty()) {
          if (presenceAndValencyStatsBuilder_.isEmpty()) {
            presenceAndValencyStatsBuilder_.dispose();
            presenceAndValencyStatsBuilder_ = null;
            presenceAndValencyStats_ = other.presenceAndValencyStats_;
            bitField0_ = (bitField0_ & ~0x00000001);
            presenceAndValencyStatsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPresenceAndValencyStatsFieldBuilder() : null;
          } else {
            presenceAndValencyStatsBuilder_.addAllMessages(other.presenceAndValencyStats_);
          }
        }
      }
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        if (!other.weightedPresenceAndValencyStats_.isEmpty()) {
          if (weightedPresenceAndValencyStats_.isEmpty()) {
            weightedPresenceAndValencyStats_ = other.weightedPresenceAndValencyStats_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureWeightedPresenceAndValencyStatsIsMutable();
            weightedPresenceAndValencyStats_.addAll(other.weightedPresenceAndValencyStats_);
          }
          onChanged();
        }
      } else {
        if (!other.weightedPresenceAndValencyStats_.isEmpty()) {
          if (weightedPresenceAndValencyStatsBuilder_.isEmpty()) {
            weightedPresenceAndValencyStatsBuilder_.dispose();
            weightedPresenceAndValencyStatsBuilder_ = null;
            weightedPresenceAndValencyStats_ = other.weightedPresenceAndValencyStats_;
            bitField0_ = (bitField0_ & ~0x00000002);
            weightedPresenceAndValencyStatsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getWeightedPresenceAndValencyStatsFieldBuilder() : null;
          } else {
            weightedPresenceAndValencyStatsBuilder_.addAllMessages(other.weightedPresenceAndValencyStats_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      CommonStatistics parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (CommonStatistics) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private long numNonMissing_ ;
    /**
     * <pre>
     * The number of examples with at least one value for this feature.
     * </pre>
     *
     * <code>uint64 num_non_missing = 1;</code>
     * @return The numNonMissing.
     */
    @Override
    public long getNumNonMissing() {
      return numNonMissing_;
    }
    /**
     * <pre>
     * The number of examples with at least one value for this feature.
     * </pre>
     *
     * <code>uint64 num_non_missing = 1;</code>
     * @param value The numNonMissing to set.
     * @return This builder for chaining.
     */
    public Builder setNumNonMissing(long value) {
      
      numNonMissing_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of examples with at least one value for this feature.
     * </pre>
     *
     * <code>uint64 num_non_missing = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumNonMissing() {
      
      numNonMissing_ = 0L;
      onChanged();
      return this;
    }

    private long numMissing_ ;
    /**
     * <pre>
     * The number of examples with no values for this feature.
     * </pre>
     *
     * <code>uint64 num_missing = 2;</code>
     * @return The numMissing.
     */
    @Override
    public long getNumMissing() {
      return numMissing_;
    }
    /**
     * <pre>
     * The number of examples with no values for this feature.
     * </pre>
     *
     * <code>uint64 num_missing = 2;</code>
     * @param value The numMissing to set.
     * @return This builder for chaining.
     */
    public Builder setNumMissing(long value) {
      
      numMissing_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of examples with no values for this feature.
     * </pre>
     *
     * <code>uint64 num_missing = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumMissing() {
      
      numMissing_ = 0L;
      onChanged();
      return this;
    }

    private long minNumValues_ ;
    /**
     * <pre>
     * The minimum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 min_num_values = 3;</code>
     * @return The minNumValues.
     */
    @Override
    public long getMinNumValues() {
      return minNumValues_;
    }
    /**
     * <pre>
     * The minimum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 min_num_values = 3;</code>
     * @param value The minNumValues to set.
     * @return This builder for chaining.
     */
    public Builder setMinNumValues(long value) {
      
      minNumValues_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 min_num_values = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinNumValues() {
      
      minNumValues_ = 0L;
      onChanged();
      return this;
    }

    private long maxNumValues_ ;
    /**
     * <pre>
     * The maximum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 max_num_values = 4;</code>
     * @return The maxNumValues.
     */
    @Override
    public long getMaxNumValues() {
      return maxNumValues_;
    }
    /**
     * <pre>
     * The maximum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 max_num_values = 4;</code>
     * @param value The maxNumValues to set.
     * @return This builder for chaining.
     */
    public Builder setMaxNumValues(long value) {
      
      maxNumValues_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of values in a single example for this feature.
     * </pre>
     *
     * <code>uint64 max_num_values = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxNumValues() {
      
      maxNumValues_ = 0L;
      onChanged();
      return this;
    }

    private float avgNumValues_ ;
    /**
     * <pre>
     * The average number of values in a single example for this feature.
     * </pre>
     *
     * <code>float avg_num_values = 5;</code>
     * @return The avgNumValues.
     */
    @Override
    public float getAvgNumValues() {
      return avgNumValues_;
    }
    /**
     * <pre>
     * The average number of values in a single example for this feature.
     * </pre>
     *
     * <code>float avg_num_values = 5;</code>
     * @param value The avgNumValues to set.
     * @return This builder for chaining.
     */
    public Builder setAvgNumValues(float value) {
      
      avgNumValues_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The average number of values in a single example for this feature.
     * </pre>
     *
     * <code>float avg_num_values = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvgNumValues() {
      
      avgNumValues_ = 0F;
      onChanged();
      return this;
    }

    private long totNumValues_ ;
    /**
     * <pre>
     * tot_num_values = avg_num_values * num_non_missing.
     * This is calculated directly, so should have less numerical error.
     * </pre>
     *
     * <code>uint64 tot_num_values = 8;</code>
     * @return The totNumValues.
     */
    @Override
    public long getTotNumValues() {
      return totNumValues_;
    }
    /**
     * <pre>
     * tot_num_values = avg_num_values * num_non_missing.
     * This is calculated directly, so should have less numerical error.
     * </pre>
     *
     * <code>uint64 tot_num_values = 8;</code>
     * @param value The totNumValues to set.
     * @return This builder for chaining.
     */
    public Builder setTotNumValues(long value) {
      
      totNumValues_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * tot_num_values = avg_num_values * num_non_missing.
     * This is calculated directly, so should have less numerical error.
     * </pre>
     *
     * <code>uint64 tot_num_values = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearTotNumValues() {
      
      totNumValues_ = 0L;
      onChanged();
      return this;
    }

    private Histogram numValuesHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder> numValuesHistogramBuilder_;
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     * @return Whether the numValuesHistogram field is set.
     */
    public boolean hasNumValuesHistogram() {
      return numValuesHistogramBuilder_ != null || numValuesHistogram_ != null;
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     * @return The numValuesHistogram.
     */
    public Histogram getNumValuesHistogram() {
      if (numValuesHistogramBuilder_ == null) {
        return numValuesHistogram_ == null ? Histogram.getDefaultInstance() : numValuesHistogram_;
      } else {
        return numValuesHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public Builder setNumValuesHistogram(Histogram value) {
      if (numValuesHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        numValuesHistogram_ = value;
        onChanged();
      } else {
        numValuesHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public Builder setNumValuesHistogram(
        Histogram.Builder builderForValue) {
      if (numValuesHistogramBuilder_ == null) {
        numValuesHistogram_ = builderForValue.build();
        onChanged();
      } else {
        numValuesHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public Builder mergeNumValuesHistogram(Histogram value) {
      if (numValuesHistogramBuilder_ == null) {
        if (numValuesHistogram_ != null) {
          numValuesHistogram_ =
            Histogram.newBuilder(numValuesHistogram_).mergeFrom(value).buildPartial();
        } else {
          numValuesHistogram_ = value;
        }
        onChanged();
      } else {
        numValuesHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public Builder clearNumValuesHistogram() {
      if (numValuesHistogramBuilder_ == null) {
        numValuesHistogram_ = null;
        onChanged();
      } else {
        numValuesHistogram_ = null;
        numValuesHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public Histogram.Builder getNumValuesHistogramBuilder() {
      
      onChanged();
      return getNumValuesHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    public HistogramOrBuilder getNumValuesHistogramOrBuilder() {
      if (numValuesHistogramBuilder_ != null) {
        return numValuesHistogramBuilder_.getMessageOrBuilder();
      } else {
        return numValuesHistogram_ == null ?
            Histogram.getDefaultInstance() : numValuesHistogram_;
      }
    }
    /**
     * <pre>
     * The quantiles histogram for the number of values in this feature.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram num_values_histogram = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder>
        getNumValuesHistogramFieldBuilder() {
      if (numValuesHistogramBuilder_ == null) {
        numValuesHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Histogram, Histogram.Builder, HistogramOrBuilder>(
                getNumValuesHistogram(),
                getParentForChildren(),
                isClean());
        numValuesHistogram_ = null;
      }
      return numValuesHistogramBuilder_;
    }

    private WeightedCommonStatistics weightedCommonStats_;
    private com.google.protobuf.SingleFieldBuilderV3<
        WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder> weightedCommonStatsBuilder_;
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     * @return Whether the weightedCommonStats field is set.
     */
    public boolean hasWeightedCommonStats() {
      return weightedCommonStatsBuilder_ != null || weightedCommonStats_ != null;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     * @return The weightedCommonStats.
     */
    public WeightedCommonStatistics getWeightedCommonStats() {
      if (weightedCommonStatsBuilder_ == null) {
        return weightedCommonStats_ == null ? WeightedCommonStatistics.getDefaultInstance() : weightedCommonStats_;
      } else {
        return weightedCommonStatsBuilder_.getMessage();
      }
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public Builder setWeightedCommonStats(WeightedCommonStatistics value) {
      if (weightedCommonStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        weightedCommonStats_ = value;
        onChanged();
      } else {
        weightedCommonStatsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public Builder setWeightedCommonStats(
        WeightedCommonStatistics.Builder builderForValue) {
      if (weightedCommonStatsBuilder_ == null) {
        weightedCommonStats_ = builderForValue.build();
        onChanged();
      } else {
        weightedCommonStatsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public Builder mergeWeightedCommonStats(WeightedCommonStatistics value) {
      if (weightedCommonStatsBuilder_ == null) {
        if (weightedCommonStats_ != null) {
          weightedCommonStats_ =
            WeightedCommonStatistics.newBuilder(weightedCommonStats_).mergeFrom(value).buildPartial();
        } else {
          weightedCommonStats_ = value;
        }
        onChanged();
      } else {
        weightedCommonStatsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public Builder clearWeightedCommonStats() {
      if (weightedCommonStatsBuilder_ == null) {
        weightedCommonStats_ = null;
        onChanged();
      } else {
        weightedCommonStats_ = null;
        weightedCommonStatsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public WeightedCommonStatistics.Builder getWeightedCommonStatsBuilder() {
      
      onChanged();
      return getWeightedCommonStatsFieldBuilder().getBuilder();
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    public WeightedCommonStatisticsOrBuilder getWeightedCommonStatsOrBuilder() {
      if (weightedCommonStatsBuilder_ != null) {
        return weightedCommonStatsBuilder_.getMessageOrBuilder();
      } else {
        return weightedCommonStats_ == null ?
            WeightedCommonStatistics.getDefaultInstance() : weightedCommonStats_;
      }
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedCommonStatistics weighted_common_stats = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder>
        getWeightedCommonStatsFieldBuilder() {
      if (weightedCommonStatsBuilder_ == null) {
        weightedCommonStatsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder>(
                getWeightedCommonStats(),
                getParentForChildren(),
                isClean());
        weightedCommonStats_ = null;
      }
      return weightedCommonStatsBuilder_;
    }

    private Histogram featureListLengthHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder> featureListLengthHistogramBuilder_;
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     * @return Whether the featureListLengthHistogram field is set.
     */
    public boolean hasFeatureListLengthHistogram() {
      return featureListLengthHistogramBuilder_ != null || featureListLengthHistogram_ != null;
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     * @return The featureListLengthHistogram.
     */
    public Histogram getFeatureListLengthHistogram() {
      if (featureListLengthHistogramBuilder_ == null) {
        return featureListLengthHistogram_ == null ? Histogram.getDefaultInstance() : featureListLengthHistogram_;
      } else {
        return featureListLengthHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public Builder setFeatureListLengthHistogram(Histogram value) {
      if (featureListLengthHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        featureListLengthHistogram_ = value;
        onChanged();
      } else {
        featureListLengthHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public Builder setFeatureListLengthHistogram(
        Histogram.Builder builderForValue) {
      if (featureListLengthHistogramBuilder_ == null) {
        featureListLengthHistogram_ = builderForValue.build();
        onChanged();
      } else {
        featureListLengthHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public Builder mergeFeatureListLengthHistogram(Histogram value) {
      if (featureListLengthHistogramBuilder_ == null) {
        if (featureListLengthHistogram_ != null) {
          featureListLengthHistogram_ =
            Histogram.newBuilder(featureListLengthHistogram_).mergeFrom(value).buildPartial();
        } else {
          featureListLengthHistogram_ = value;
        }
        onChanged();
      } else {
        featureListLengthHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public Builder clearFeatureListLengthHistogram() {
      if (featureListLengthHistogramBuilder_ == null) {
        featureListLengthHistogram_ = null;
        onChanged();
      } else {
        featureListLengthHistogram_ = null;
        featureListLengthHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public Histogram.Builder getFeatureListLengthHistogramBuilder() {
      
      onChanged();
      return getFeatureListLengthHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    public HistogramOrBuilder getFeatureListLengthHistogramOrBuilder() {
      if (featureListLengthHistogramBuilder_ != null) {
        return featureListLengthHistogramBuilder_.getMessageOrBuilder();
      } else {
        return featureListLengthHistogram_ == null ?
            Histogram.getDefaultInstance() : featureListLengthHistogram_;
      }
    }
    /**
     * <pre>
     * The histogram for the number of features in the feature list (only set if
     * this feature is a non-context feature from a tf.SequenceExample).
     * This is different from num_values_histogram, as num_values_histogram tracks
     * the count of all values for a feature in an example, whereas this tracks
     * the length of the feature list for this feature in an example (where each
     * feature list can contain multiple values).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram feature_list_length_histogram = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder>
        getFeatureListLengthHistogramFieldBuilder() {
      if (featureListLengthHistogramBuilder_ == null) {
        featureListLengthHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Histogram, Histogram.Builder, HistogramOrBuilder>(
                getFeatureListLengthHistogram(),
                getParentForChildren(),
                isClean());
        featureListLengthHistogram_ = null;
      }
      return featureListLengthHistogramBuilder_;
    }

    private java.util.List<PresenceAndValencyStatistics> presenceAndValencyStats_ =
      java.util.Collections.emptyList();
    private void ensurePresenceAndValencyStatsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        presenceAndValencyStats_ = new java.util.ArrayList<PresenceAndValencyStatistics>(presenceAndValencyStats_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        PresenceAndValencyStatistics, PresenceAndValencyStatistics.Builder, PresenceAndValencyStatisticsOrBuilder> presenceAndValencyStatsBuilder_;

    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public java.util.List<PresenceAndValencyStatistics> getPresenceAndValencyStatsList() {
      if (presenceAndValencyStatsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(presenceAndValencyStats_);
      } else {
        return presenceAndValencyStatsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public int getPresenceAndValencyStatsCount() {
      if (presenceAndValencyStatsBuilder_ == null) {
        return presenceAndValencyStats_.size();
      } else {
        return presenceAndValencyStatsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public PresenceAndValencyStatistics getPresenceAndValencyStats(int index) {
      if (presenceAndValencyStatsBuilder_ == null) {
        return presenceAndValencyStats_.get(index);
      } else {
        return presenceAndValencyStatsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder setPresenceAndValencyStats(
        int index, PresenceAndValencyStatistics value) {
      if (presenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.set(index, value);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder setPresenceAndValencyStats(
        int index, PresenceAndValencyStatistics.Builder builderForValue) {
      if (presenceAndValencyStatsBuilder_ == null) {
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.set(index, builderForValue.build());
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder addPresenceAndValencyStats(PresenceAndValencyStatistics value) {
      if (presenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.add(value);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder addPresenceAndValencyStats(
        int index, PresenceAndValencyStatistics value) {
      if (presenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.add(index, value);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder addPresenceAndValencyStats(
        PresenceAndValencyStatistics.Builder builderForValue) {
      if (presenceAndValencyStatsBuilder_ == null) {
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.add(builderForValue.build());
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder addPresenceAndValencyStats(
        int index, PresenceAndValencyStatistics.Builder builderForValue) {
      if (presenceAndValencyStatsBuilder_ == null) {
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.add(index, builderForValue.build());
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder addAllPresenceAndValencyStats(
        Iterable<? extends PresenceAndValencyStatistics> values) {
      if (presenceAndValencyStatsBuilder_ == null) {
        ensurePresenceAndValencyStatsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, presenceAndValencyStats_);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder clearPresenceAndValencyStats() {
      if (presenceAndValencyStatsBuilder_ == null) {
        presenceAndValencyStats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public Builder removePresenceAndValencyStats(int index) {
      if (presenceAndValencyStatsBuilder_ == null) {
        ensurePresenceAndValencyStatsIsMutable();
        presenceAndValencyStats_.remove(index);
        onChanged();
      } else {
        presenceAndValencyStatsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public PresenceAndValencyStatistics.Builder getPresenceAndValencyStatsBuilder(
        int index) {
      return getPresenceAndValencyStatsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public PresenceAndValencyStatisticsOrBuilder getPresenceAndValencyStatsOrBuilder(
        int index) {
      if (presenceAndValencyStatsBuilder_ == null) {
        return presenceAndValencyStats_.get(index);  } else {
        return presenceAndValencyStatsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public java.util.List<? extends PresenceAndValencyStatisticsOrBuilder>
         getPresenceAndValencyStatsOrBuilderList() {
      if (presenceAndValencyStatsBuilder_ != null) {
        return presenceAndValencyStatsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(presenceAndValencyStats_);
      }
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public PresenceAndValencyStatistics.Builder addPresenceAndValencyStatsBuilder() {
      return getPresenceAndValencyStatsFieldBuilder().addBuilder(
          PresenceAndValencyStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public PresenceAndValencyStatistics.Builder addPresenceAndValencyStatsBuilder(
        int index) {
      return getPresenceAndValencyStatsFieldBuilder().addBuilder(
          index, PresenceAndValencyStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains presence and valency stats for each nest level of the feature.
     * The first item corresponds to the outermost level, and by definition,
     * the stats it contains equals to the corresponding stats defined above.
     * May not be populated if the feature is of nest level 1.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.PresenceAndValencyStatistics presence_and_valency_stats = 10;</code>
     */
    public java.util.List<PresenceAndValencyStatistics.Builder>
         getPresenceAndValencyStatsBuilderList() {
      return getPresenceAndValencyStatsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        PresenceAndValencyStatistics, PresenceAndValencyStatistics.Builder, PresenceAndValencyStatisticsOrBuilder>
        getPresenceAndValencyStatsFieldBuilder() {
      if (presenceAndValencyStatsBuilder_ == null) {
        presenceAndValencyStatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            PresenceAndValencyStatistics, PresenceAndValencyStatistics.Builder, PresenceAndValencyStatisticsOrBuilder>(
                presenceAndValencyStats_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        presenceAndValencyStats_ = null;
      }
      return presenceAndValencyStatsBuilder_;
    }

    private java.util.List<WeightedCommonStatistics> weightedPresenceAndValencyStats_ =
      java.util.Collections.emptyList();
    private void ensureWeightedPresenceAndValencyStatsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        weightedPresenceAndValencyStats_ = new java.util.ArrayList<WeightedCommonStatistics>(weightedPresenceAndValencyStats_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder> weightedPresenceAndValencyStatsBuilder_;

    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public java.util.List<WeightedCommonStatistics> getWeightedPresenceAndValencyStatsList() {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(weightedPresenceAndValencyStats_);
      } else {
        return weightedPresenceAndValencyStatsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public int getWeightedPresenceAndValencyStatsCount() {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        return weightedPresenceAndValencyStats_.size();
      } else {
        return weightedPresenceAndValencyStatsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public WeightedCommonStatistics getWeightedPresenceAndValencyStats(int index) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        return weightedPresenceAndValencyStats_.get(index);
      } else {
        return weightedPresenceAndValencyStatsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder setWeightedPresenceAndValencyStats(
        int index, WeightedCommonStatistics value) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.set(index, value);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder setWeightedPresenceAndValencyStats(
        int index, WeightedCommonStatistics.Builder builderForValue) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.set(index, builderForValue.build());
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder addWeightedPresenceAndValencyStats(WeightedCommonStatistics value) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.add(value);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder addWeightedPresenceAndValencyStats(
        int index, WeightedCommonStatistics value) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.add(index, value);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder addWeightedPresenceAndValencyStats(
        WeightedCommonStatistics.Builder builderForValue) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.add(builderForValue.build());
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder addWeightedPresenceAndValencyStats(
        int index, WeightedCommonStatistics.Builder builderForValue) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.add(index, builderForValue.build());
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder addAllWeightedPresenceAndValencyStats(
        Iterable<? extends WeightedCommonStatistics> values) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        ensureWeightedPresenceAndValencyStatsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, weightedPresenceAndValencyStats_);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder clearWeightedPresenceAndValencyStats() {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        weightedPresenceAndValencyStats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public Builder removeWeightedPresenceAndValencyStats(int index) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        ensureWeightedPresenceAndValencyStatsIsMutable();
        weightedPresenceAndValencyStats_.remove(index);
        onChanged();
      } else {
        weightedPresenceAndValencyStatsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public WeightedCommonStatistics.Builder getWeightedPresenceAndValencyStatsBuilder(
        int index) {
      return getWeightedPresenceAndValencyStatsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public WeightedCommonStatisticsOrBuilder getWeightedPresenceAndValencyStatsOrBuilder(
        int index) {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        return weightedPresenceAndValencyStats_.get(index);  } else {
        return weightedPresenceAndValencyStatsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public java.util.List<? extends WeightedCommonStatisticsOrBuilder>
         getWeightedPresenceAndValencyStatsOrBuilderList() {
      if (weightedPresenceAndValencyStatsBuilder_ != null) {
        return weightedPresenceAndValencyStatsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(weightedPresenceAndValencyStats_);
      }
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public WeightedCommonStatistics.Builder addWeightedPresenceAndValencyStatsBuilder() {
      return getWeightedPresenceAndValencyStatsFieldBuilder().addBuilder(
          WeightedCommonStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public WeightedCommonStatistics.Builder addWeightedPresenceAndValencyStatsBuilder(
        int index) {
      return getWeightedPresenceAndValencyStatsFieldBuilder().addBuilder(
          index, WeightedCommonStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * If not empty, it's parallel to presence_and_valency_stats.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.WeightedCommonStatistics weighted_presence_and_valency_stats = 11;</code>
     */
    public java.util.List<WeightedCommonStatistics.Builder>
         getWeightedPresenceAndValencyStatsBuilderList() {
      return getWeightedPresenceAndValencyStatsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder>
        getWeightedPresenceAndValencyStatsFieldBuilder() {
      if (weightedPresenceAndValencyStatsBuilder_ == null) {
        weightedPresenceAndValencyStatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            WeightedCommonStatistics, WeightedCommonStatistics.Builder, WeightedCommonStatisticsOrBuilder>(
                weightedPresenceAndValencyStats_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        weightedPresenceAndValencyStats_ = null;
      }
      return weightedPresenceAndValencyStatsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.metadata.v0.CommonStatistics)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.metadata.v0.CommonStatistics)
  private static final CommonStatistics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new CommonStatistics();
  }

  public static CommonStatistics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CommonStatistics>
      PARSER = new com.google.protobuf.AbstractParser<CommonStatistics>() {
    @Override
    public CommonStatistics parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CommonStatistics(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CommonStatistics> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<CommonStatistics> getParserForType() {
    return PARSER;
  }

  @Override
  public CommonStatistics getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

