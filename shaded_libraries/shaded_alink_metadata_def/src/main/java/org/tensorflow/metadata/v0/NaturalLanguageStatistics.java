// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statistics.proto

package org.tensorflow.metadata.v0;

import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.GeneratedMessageV3;

/**
 * <pre>
 * Statistics for a feature containing a NL domain.
 * </pre>
 *
 * Protobuf type {@code tensorflow.metadata.v0.NaturalLanguageStatistics}
 */
public final class NaturalLanguageStatistics extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.metadata.v0.NaturalLanguageStatistics)
    NaturalLanguageStatisticsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NaturalLanguageStatistics.newBuilder() to construct.
  private NaturalLanguageStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NaturalLanguageStatistics() {
    reportedSequences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    tokenStatistics_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new NaturalLanguageStatistics();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NaturalLanguageStatistics(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 9: {

            featureCoverage_ = input.readDouble();
            break;
          }
          case 17: {

            avgTokenLength_ = input.readDouble();
            break;
          }
          case 26: {
            Histogram.Builder subBuilder = null;
            if (tokenLengthHistogram_ != null) {
              subBuilder = tokenLengthHistogram_.toBuilder();
            }
            tokenLengthHistogram_ = input.readMessage(Histogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tokenLengthHistogram_);
              tokenLengthHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            locationMisses_ = input.readInt64();
            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              reportedSequences_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            reportedSequences_.add(s);
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tokenStatistics_ = new java.util.ArrayList<TokenStatistics>();
              mutable_bitField0_ |= 0x00000002;
            }
            tokenStatistics_.add(
                input.readMessage(TokenStatistics.parser(), extensionRegistry));
            break;
          }
          case 58: {
            RankHistogram.Builder subBuilder = null;
            if (rankHistogram_ != null) {
              subBuilder = rankHistogram_.toBuilder();
            }
            rankHistogram_ = input.readMessage(RankHistogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rankHistogram_);
              rankHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            WeightedNaturalLanguageStatistics.Builder subBuilder = null;
            if (weightedNlStatistics_ != null) {
              subBuilder = weightedNlStatistics_.toBuilder();
            }
            weightedNlStatistics_ = input.readMessage(WeightedNaturalLanguageStatistics.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(weightedNlStatistics_);
              weightedNlStatistics_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            Histogram.Builder subBuilder = null;
            if (sequenceLengthHistogram_ != null) {
              subBuilder = sequenceLengthHistogram_.toBuilder();
            }
            sequenceLengthHistogram_ = input.readMessage(Histogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(sequenceLengthHistogram_);
              sequenceLengthHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 80: {

            minSequenceLength_ = input.readInt64();
            break;
          }
          case 88: {

            maxSequenceLength_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        reportedSequences_ = reportedSequences_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        tokenStatistics_ = java.util.Collections.unmodifiableList(tokenStatistics_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_descriptor;
  }

  @Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            NaturalLanguageStatistics.class, Builder.class);
  }

  public interface TokenStatisticsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string string_token = 1;</code>
     * @return Whether the stringToken field is set.
     */
    boolean hasStringToken();
    /**
     * <code>string string_token = 1;</code>
     * @return The stringToken.
     */
    String getStringToken();
    /**
     * <code>string string_token = 1;</code>
     * @return The bytes for stringToken.
     */
    com.google.protobuf.ByteString
        getStringTokenBytes();

    /**
     * <code>int64 int_token = 2;</code>
     * @return Whether the intToken field is set.
     */
    boolean hasIntToken();
    /**
     * <code>int64 int_token = 2;</code>
     * @return The intToken.
     */
    long getIntToken();

    /**
     * <pre>
     * The number of times the value occurs. Stored as a double to be able to
     * handle weighted features.
     * </pre>
     *
     * <code>double frequency = 3;</code>
     * @return The frequency.
     */
    double getFrequency();

    /**
     * <pre>
     * Fraction of sequences containing the token.
     * </pre>
     *
     * <code>double fraction_of_sequences = 4;</code>
     * @return The fractionOfSequences.
     */
    double getFractionOfSequences();

    /**
     * <pre>
     * Min number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_min_frequency = 5;</code>
     * @return The perSequenceMinFrequency.
     */
    double getPerSequenceMinFrequency();

    /**
     * <pre>
     * Average number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_avg_frequency = 6;</code>
     * @return The perSequenceAvgFrequency.
     */
    double getPerSequenceAvgFrequency();

    /**
     * <pre>
     * Maximum number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_max_frequency = 7;</code>
     * @return The perSequenceMaxFrequency.
     */
    double getPerSequenceMaxFrequency();

    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     * @return Whether the positions field is set.
     */
    boolean hasPositions();
    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     * @return The positions.
     */
    Histogram getPositions();
    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     */
    HistogramOrBuilder getPositionsOrBuilder();

    public TokenStatistics.TokenCase getTokenCase();
  }
  /**
   * Protobuf type {@code tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics}
   */
  public static final class TokenStatistics extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics)
      TokenStatisticsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TokenStatistics.newBuilder() to construct.
    private TokenStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TokenStatistics() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new TokenStatistics();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TokenStatistics(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();
              tokenCase_ = 1;
              token_ = s;
              break;
            }
            case 16: {
              token_ = input.readInt64();
              tokenCase_ = 2;
              break;
            }
            case 25: {

              frequency_ = input.readDouble();
              break;
            }
            case 33: {

              fractionOfSequences_ = input.readDouble();
              break;
            }
            case 41: {

              perSequenceMinFrequency_ = input.readDouble();
              break;
            }
            case 49: {

              perSequenceAvgFrequency_ = input.readDouble();
              break;
            }
            case 57: {

              perSequenceMaxFrequency_ = input.readDouble();
              break;
            }
            case 66: {
              Histogram.Builder subBuilder = null;
              if (positions_ != null) {
                subBuilder = positions_.toBuilder();
              }
              positions_ = input.readMessage(Histogram.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(positions_);
                positions_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_TokenStatistics_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_TokenStatistics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TokenStatistics.class, Builder.class);
    }

    private int tokenCase_ = 0;
    private Object token_;
    public enum TokenCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      STRING_TOKEN(1),
      INT_TOKEN(2),
      TOKEN_NOT_SET(0);
      private final int value;
      private TokenCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static TokenCase valueOf(int value) {
        return forNumber(value);
      }

      public static TokenCase forNumber(int value) {
        switch (value) {
          case 1: return STRING_TOKEN;
          case 2: return INT_TOKEN;
          case 0: return TOKEN_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TokenCase
    getTokenCase() {
      return TokenCase.forNumber(
          tokenCase_);
    }

    public static final int STRING_TOKEN_FIELD_NUMBER = 1;
    /**
     * <code>string string_token = 1;</code>
     * @return Whether the stringToken field is set.
     */
    public boolean hasStringToken() {
      return tokenCase_ == 1;
    }
    /**
     * <code>string string_token = 1;</code>
     * @return The stringToken.
     */
    public String getStringToken() {
      Object ref = "";
      if (tokenCase_ == 1) {
        ref = token_;
      }
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (tokenCase_ == 1) {
          token_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string string_token = 1;</code>
     * @return The bytes for stringToken.
     */
    public com.google.protobuf.ByteString
        getStringTokenBytes() {
      Object ref = "";
      if (tokenCase_ == 1) {
        ref = token_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        if (tokenCase_ == 1) {
          token_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INT_TOKEN_FIELD_NUMBER = 2;
    /**
     * <code>int64 int_token = 2;</code>
     * @return Whether the intToken field is set.
     */
    @Override
    public boolean hasIntToken() {
      return tokenCase_ == 2;
    }
    /**
     * <code>int64 int_token = 2;</code>
     * @return The intToken.
     */
    @Override
    public long getIntToken() {
      if (tokenCase_ == 2) {
        return (Long) token_;
      }
      return 0L;
    }

    public static final int FREQUENCY_FIELD_NUMBER = 3;
    private double frequency_;
    /**
     * <pre>
     * The number of times the value occurs. Stored as a double to be able to
     * handle weighted features.
     * </pre>
     *
     * <code>double frequency = 3;</code>
     * @return The frequency.
     */
    @Override
    public double getFrequency() {
      return frequency_;
    }

    public static final int FRACTION_OF_SEQUENCES_FIELD_NUMBER = 4;
    private double fractionOfSequences_;
    /**
     * <pre>
     * Fraction of sequences containing the token.
     * </pre>
     *
     * <code>double fraction_of_sequences = 4;</code>
     * @return The fractionOfSequences.
     */
    @Override
    public double getFractionOfSequences() {
      return fractionOfSequences_;
    }

    public static final int PER_SEQUENCE_MIN_FREQUENCY_FIELD_NUMBER = 5;
    private double perSequenceMinFrequency_;
    /**
     * <pre>
     * Min number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_min_frequency = 5;</code>
     * @return The perSequenceMinFrequency.
     */
    @Override
    public double getPerSequenceMinFrequency() {
      return perSequenceMinFrequency_;
    }

    public static final int PER_SEQUENCE_AVG_FREQUENCY_FIELD_NUMBER = 6;
    private double perSequenceAvgFrequency_;
    /**
     * <pre>
     * Average number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_avg_frequency = 6;</code>
     * @return The perSequenceAvgFrequency.
     */
    @Override
    public double getPerSequenceAvgFrequency() {
      return perSequenceAvgFrequency_;
    }

    public static final int PER_SEQUENCE_MAX_FREQUENCY_FIELD_NUMBER = 7;
    private double perSequenceMaxFrequency_;
    /**
     * <pre>
     * Maximum number of token occurrences within a sequence.
     * </pre>
     *
     * <code>double per_sequence_max_frequency = 7;</code>
     * @return The perSequenceMaxFrequency.
     */
    @Override
    public double getPerSequenceMaxFrequency() {
      return perSequenceMaxFrequency_;
    }

    public static final int POSITIONS_FIELD_NUMBER = 8;
    private Histogram positions_;
    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     * @return Whether the positions field is set.
     */
    @Override
    public boolean hasPositions() {
      return positions_ != null;
    }
    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     * @return The positions.
     */
    @Override
    public Histogram getPositions() {
      return positions_ == null ? Histogram.getDefaultInstance() : positions_;
    }
    /**
     * <pre>
     * Token positions within a sequence. Normalized by sequence length.
     * (e.g. a token that occurres in position 0.5 occurs in the middle of
     * a sequence).
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
     */
    @Override
    public HistogramOrBuilder getPositionsOrBuilder() {
      return getPositions();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (tokenCase_ == 1) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, token_);
      }
      if (tokenCase_ == 2) {
        output.writeInt64(
            2, (long)((Long) token_));
      }
      if (Double.doubleToRawLongBits(frequency_) != 0) {
        output.writeDouble(3, frequency_);
      }
      if (Double.doubleToRawLongBits(fractionOfSequences_) != 0) {
        output.writeDouble(4, fractionOfSequences_);
      }
      if (Double.doubleToRawLongBits(perSequenceMinFrequency_) != 0) {
        output.writeDouble(5, perSequenceMinFrequency_);
      }
      if (Double.doubleToRawLongBits(perSequenceAvgFrequency_) != 0) {
        output.writeDouble(6, perSequenceAvgFrequency_);
      }
      if (Double.doubleToRawLongBits(perSequenceMaxFrequency_) != 0) {
        output.writeDouble(7, perSequenceMaxFrequency_);
      }
      if (positions_ != null) {
        output.writeMessage(8, getPositions());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (tokenCase_ == 1) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, token_);
      }
      if (tokenCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              2, (long)((Long) token_));
      }
      if (Double.doubleToRawLongBits(frequency_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, frequency_);
      }
      if (Double.doubleToRawLongBits(fractionOfSequences_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, fractionOfSequences_);
      }
      if (Double.doubleToRawLongBits(perSequenceMinFrequency_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, perSequenceMinFrequency_);
      }
      if (Double.doubleToRawLongBits(perSequenceAvgFrequency_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, perSequenceAvgFrequency_);
      }
      if (Double.doubleToRawLongBits(perSequenceMaxFrequency_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, perSequenceMaxFrequency_);
      }
      if (positions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getPositions());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof TokenStatistics)) {
        return super.equals(obj);
      }
      TokenStatistics other = (TokenStatistics) obj;

      if (Double.doubleToLongBits(getFrequency())
          != Double.doubleToLongBits(
              other.getFrequency())) return false;
      if (Double.doubleToLongBits(getFractionOfSequences())
          != Double.doubleToLongBits(
              other.getFractionOfSequences())) return false;
      if (Double.doubleToLongBits(getPerSequenceMinFrequency())
          != Double.doubleToLongBits(
              other.getPerSequenceMinFrequency())) return false;
      if (Double.doubleToLongBits(getPerSequenceAvgFrequency())
          != Double.doubleToLongBits(
              other.getPerSequenceAvgFrequency())) return false;
      if (Double.doubleToLongBits(getPerSequenceMaxFrequency())
          != Double.doubleToLongBits(
              other.getPerSequenceMaxFrequency())) return false;
      if (hasPositions() != other.hasPositions()) return false;
      if (hasPositions()) {
        if (!getPositions()
            .equals(other.getPositions())) return false;
      }
      if (!getTokenCase().equals(other.getTokenCase())) return false;
      switch (tokenCase_) {
        case 1:
          if (!getStringToken()
              .equals(other.getStringToken())) return false;
          break;
        case 2:
          if (getIntToken()
              != other.getIntToken()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getFrequency()));
      hash = (37 * hash) + FRACTION_OF_SEQUENCES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getFractionOfSequences()));
      hash = (37 * hash) + PER_SEQUENCE_MIN_FREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getPerSequenceMinFrequency()));
      hash = (37 * hash) + PER_SEQUENCE_AVG_FREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getPerSequenceAvgFrequency()));
      hash = (37 * hash) + PER_SEQUENCE_MAX_FREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getPerSequenceMaxFrequency()));
      if (hasPositions()) {
        hash = (37 * hash) + POSITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getPositions().hashCode();
      }
      switch (tokenCase_) {
        case 1:
          hash = (37 * hash) + STRING_TOKEN_FIELD_NUMBER;
          hash = (53 * hash) + getStringToken().hashCode();
          break;
        case 2:
          hash = (37 * hash) + INT_TOKEN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getIntToken());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static TokenStatistics parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TokenStatistics parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TokenStatistics parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TokenStatistics parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TokenStatistics parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TokenStatistics parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TokenStatistics parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TokenStatistics parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static TokenStatistics parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static TokenStatistics parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static TokenStatistics parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TokenStatistics parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(TokenStatistics prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics)
        TokenStatisticsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_TokenStatistics_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_TokenStatistics_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TokenStatistics.class, Builder.class);
      }

      // Construct using org.tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        frequency_ = 0D;

        fractionOfSequences_ = 0D;

        perSequenceMinFrequency_ = 0D;

        perSequenceAvgFrequency_ = 0D;

        perSequenceMaxFrequency_ = 0D;

        if (positionsBuilder_ == null) {
          positions_ = null;
        } else {
          positions_ = null;
          positionsBuilder_ = null;
        }
        tokenCase_ = 0;
        token_ = null;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_TokenStatistics_descriptor;
      }

      @Override
      public TokenStatistics getDefaultInstanceForType() {
        return TokenStatistics.getDefaultInstance();
      }

      @Override
      public TokenStatistics build() {
        TokenStatistics result = buildPartial();
        if (!result.isInitialized()) {
          throw Builder.newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public TokenStatistics buildPartial() {
        TokenStatistics result = new TokenStatistics(this);
        if (tokenCase_ == 1) {
          result.token_ = token_;
        }
        if (tokenCase_ == 2) {
          result.token_ = token_;
        }
        result.frequency_ = frequency_;
        result.fractionOfSequences_ = fractionOfSequences_;
        result.perSequenceMinFrequency_ = perSequenceMinFrequency_;
        result.perSequenceAvgFrequency_ = perSequenceAvgFrequency_;
        result.perSequenceMaxFrequency_ = perSequenceMaxFrequency_;
        if (positionsBuilder_ == null) {
          result.positions_ = positions_;
        } else {
          result.positions_ = positionsBuilder_.build();
        }
        result.tokenCase_ = tokenCase_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TokenStatistics) {
          return mergeFrom((TokenStatistics)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(TokenStatistics other) {
        if (other == TokenStatistics.getDefaultInstance()) return this;
        if (other.getFrequency() != 0D) {
          setFrequency(other.getFrequency());
        }
        if (other.getFractionOfSequences() != 0D) {
          setFractionOfSequences(other.getFractionOfSequences());
        }
        if (other.getPerSequenceMinFrequency() != 0D) {
          setPerSequenceMinFrequency(other.getPerSequenceMinFrequency());
        }
        if (other.getPerSequenceAvgFrequency() != 0D) {
          setPerSequenceAvgFrequency(other.getPerSequenceAvgFrequency());
        }
        if (other.getPerSequenceMaxFrequency() != 0D) {
          setPerSequenceMaxFrequency(other.getPerSequenceMaxFrequency());
        }
        if (other.hasPositions()) {
          mergePositions(other.getPositions());
        }
        switch (other.getTokenCase()) {
          case STRING_TOKEN: {
            tokenCase_ = 1;
            token_ = other.token_;
            onChanged();
            break;
          }
          case INT_TOKEN: {
            setIntToken(other.getIntToken());
            break;
          }
          case TOKEN_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        TokenStatistics parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (TokenStatistics) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int tokenCase_ = 0;
      private Object token_;
      public TokenCase
          getTokenCase() {
        return TokenCase.forNumber(
            tokenCase_);
      }

      public Builder clearToken() {
        tokenCase_ = 0;
        token_ = null;
        onChanged();
        return this;
      }


      /**
       * <code>string string_token = 1;</code>
       * @return Whether the stringToken field is set.
       */
      @Override
      public boolean hasStringToken() {
        return tokenCase_ == 1;
      }
      /**
       * <code>string string_token = 1;</code>
       * @return The stringToken.
       */
      @Override
      public String getStringToken() {
        Object ref = "";
        if (tokenCase_ == 1) {
          ref = token_;
        }
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          if (tokenCase_ == 1) {
            token_ = s;
          }
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string string_token = 1;</code>
       * @return The bytes for stringToken.
       */
      @Override
      public com.google.protobuf.ByteString
          getStringTokenBytes() {
        Object ref = "";
        if (tokenCase_ == 1) {
          ref = token_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          if (tokenCase_ == 1) {
            token_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string string_token = 1;</code>
       * @param value The stringToken to set.
       * @return This builder for chaining.
       */
      public Builder setStringToken(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  tokenCase_ = 1;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string string_token = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringToken() {
        if (tokenCase_ == 1) {
          tokenCase_ = 0;
          token_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>string string_token = 1;</code>
       * @param value The bytes for stringToken to set.
       * @return This builder for chaining.
       */
      public Builder setStringTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  AbstractMessageLite.checkByteStringIsUtf8(value);
        tokenCase_ = 1;
        token_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>int64 int_token = 2;</code>
       * @return Whether the intToken field is set.
       */
      public boolean hasIntToken() {
        return tokenCase_ == 2;
      }
      /**
       * <code>int64 int_token = 2;</code>
       * @return The intToken.
       */
      public long getIntToken() {
        if (tokenCase_ == 2) {
          return (Long) token_;
        }
        return 0L;
      }
      /**
       * <code>int64 int_token = 2;</code>
       * @param value The intToken to set.
       * @return This builder for chaining.
       */
      public Builder setIntToken(long value) {
        tokenCase_ = 2;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 int_token = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIntToken() {
        if (tokenCase_ == 2) {
          tokenCase_ = 0;
          token_ = null;
          onChanged();
        }
        return this;
      }

      private double frequency_ ;
      /**
       * <pre>
       * The number of times the value occurs. Stored as a double to be able to
       * handle weighted features.
       * </pre>
       *
       * <code>double frequency = 3;</code>
       * @return The frequency.
       */
      @Override
      public double getFrequency() {
        return frequency_;
      }
      /**
       * <pre>
       * The number of times the value occurs. Stored as a double to be able to
       * handle weighted features.
       * </pre>
       *
       * <code>double frequency = 3;</code>
       * @param value The frequency to set.
       * @return This builder for chaining.
       */
      public Builder setFrequency(double value) {
        
        frequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of times the value occurs. Stored as a double to be able to
       * handle weighted features.
       * </pre>
       *
       * <code>double frequency = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrequency() {
        
        frequency_ = 0D;
        onChanged();
        return this;
      }

      private double fractionOfSequences_ ;
      /**
       * <pre>
       * Fraction of sequences containing the token.
       * </pre>
       *
       * <code>double fraction_of_sequences = 4;</code>
       * @return The fractionOfSequences.
       */
      @Override
      public double getFractionOfSequences() {
        return fractionOfSequences_;
      }
      /**
       * <pre>
       * Fraction of sequences containing the token.
       * </pre>
       *
       * <code>double fraction_of_sequences = 4;</code>
       * @param value The fractionOfSequences to set.
       * @return This builder for chaining.
       */
      public Builder setFractionOfSequences(double value) {
        
        fractionOfSequences_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fraction of sequences containing the token.
       * </pre>
       *
       * <code>double fraction_of_sequences = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFractionOfSequences() {
        
        fractionOfSequences_ = 0D;
        onChanged();
        return this;
      }

      private double perSequenceMinFrequency_ ;
      /**
       * <pre>
       * Min number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_min_frequency = 5;</code>
       * @return The perSequenceMinFrequency.
       */
      @Override
      public double getPerSequenceMinFrequency() {
        return perSequenceMinFrequency_;
      }
      /**
       * <pre>
       * Min number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_min_frequency = 5;</code>
       * @param value The perSequenceMinFrequency to set.
       * @return This builder for chaining.
       */
      public Builder setPerSequenceMinFrequency(double value) {
        
        perSequenceMinFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Min number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_min_frequency = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPerSequenceMinFrequency() {
        
        perSequenceMinFrequency_ = 0D;
        onChanged();
        return this;
      }

      private double perSequenceAvgFrequency_ ;
      /**
       * <pre>
       * Average number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_avg_frequency = 6;</code>
       * @return The perSequenceAvgFrequency.
       */
      @Override
      public double getPerSequenceAvgFrequency() {
        return perSequenceAvgFrequency_;
      }
      /**
       * <pre>
       * Average number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_avg_frequency = 6;</code>
       * @param value The perSequenceAvgFrequency to set.
       * @return This builder for chaining.
       */
      public Builder setPerSequenceAvgFrequency(double value) {
        
        perSequenceAvgFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Average number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_avg_frequency = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPerSequenceAvgFrequency() {
        
        perSequenceAvgFrequency_ = 0D;
        onChanged();
        return this;
      }

      private double perSequenceMaxFrequency_ ;
      /**
       * <pre>
       * Maximum number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_max_frequency = 7;</code>
       * @return The perSequenceMaxFrequency.
       */
      @Override
      public double getPerSequenceMaxFrequency() {
        return perSequenceMaxFrequency_;
      }
      /**
       * <pre>
       * Maximum number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_max_frequency = 7;</code>
       * @param value The perSequenceMaxFrequency to set.
       * @return This builder for chaining.
       */
      public Builder setPerSequenceMaxFrequency(double value) {
        
        perSequenceMaxFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of token occurrences within a sequence.
       * </pre>
       *
       * <code>double per_sequence_max_frequency = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPerSequenceMaxFrequency() {
        
        perSequenceMaxFrequency_ = 0D;
        onChanged();
        return this;
      }

      private Histogram positions_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Histogram, Histogram.Builder, HistogramOrBuilder> positionsBuilder_;
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       * @return Whether the positions field is set.
       */
      public boolean hasPositions() {
        return positionsBuilder_ != null || positions_ != null;
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       * @return The positions.
       */
      public Histogram getPositions() {
        if (positionsBuilder_ == null) {
          return positions_ == null ? Histogram.getDefaultInstance() : positions_;
        } else {
          return positionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public Builder setPositions(Histogram value) {
        if (positionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          positions_ = value;
          onChanged();
        } else {
          positionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public Builder setPositions(
          Histogram.Builder builderForValue) {
        if (positionsBuilder_ == null) {
          positions_ = builderForValue.build();
          onChanged();
        } else {
          positionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public Builder mergePositions(Histogram value) {
        if (positionsBuilder_ == null) {
          if (positions_ != null) {
            positions_ =
              Histogram.newBuilder(positions_).mergeFrom(value).buildPartial();
          } else {
            positions_ = value;
          }
          onChanged();
        } else {
          positionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public Builder clearPositions() {
        if (positionsBuilder_ == null) {
          positions_ = null;
          onChanged();
        } else {
          positions_ = null;
          positionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public Histogram.Builder getPositionsBuilder() {
        
        onChanged();
        return getPositionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      public HistogramOrBuilder getPositionsOrBuilder() {
        if (positionsBuilder_ != null) {
          return positionsBuilder_.getMessageOrBuilder();
        } else {
          return positions_ == null ?
              Histogram.getDefaultInstance() : positions_;
        }
      }
      /**
       * <pre>
       * Token positions within a sequence. Normalized by sequence length.
       * (e.g. a token that occurres in position 0.5 occurs in the middle of
       * a sequence).
       * </pre>
       *
       * <code>.tensorflow.metadata.v0.Histogram positions = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Histogram, Histogram.Builder, HistogramOrBuilder>
          getPositionsFieldBuilder() {
        if (positionsBuilder_ == null) {
          positionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Histogram, Histogram.Builder, HistogramOrBuilder>(
                  getPositions(),
                  getParentForChildren(),
                  isClean());
          positions_ = null;
        }
        return positionsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics)
    private static final TokenStatistics DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TokenStatistics();
    }

    public static TokenStatistics getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TokenStatistics>
        PARSER = new com.google.protobuf.AbstractParser<TokenStatistics>() {
      @Override
      public TokenStatistics parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TokenStatistics(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TokenStatistics> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<TokenStatistics> getParserForType() {
      return PARSER;
    }

    @Override
    public TokenStatistics getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int FEATURE_COVERAGE_FIELD_NUMBER = 1;
  private double featureCoverage_;
  /**
   * <pre>
   * Fraction of feature input tokens considered in-vocab.
   * </pre>
   *
   * <code>double feature_coverage = 1;</code>
   * @return The featureCoverage.
   */
  @Override
  public double getFeatureCoverage() {
    return featureCoverage_;
  }

  public static final int AVG_TOKEN_LENGTH_FIELD_NUMBER = 2;
  private double avgTokenLength_;
  /**
   * <pre>
   * Average token length of tokens used by the feature.
   * </pre>
   *
   * <code>double avg_token_length = 2;</code>
   * @return The avgTokenLength.
   */
  @Override
  public double getAvgTokenLength() {
    return avgTokenLength_;
  }

  public static final int TOKEN_LENGTH_HISTOGRAM_FIELD_NUMBER = 3;
  private Histogram tokenLengthHistogram_;
  /**
   * <pre>
   * Histogram containing the distribution of token lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
   * @return Whether the tokenLengthHistogram field is set.
   */
  @Override
  public boolean hasTokenLengthHistogram() {
    return tokenLengthHistogram_ != null;
  }
  /**
   * <pre>
   * Histogram containing the distribution of token lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
   * @return The tokenLengthHistogram.
   */
  @Override
  public Histogram getTokenLengthHistogram() {
    return tokenLengthHistogram_ == null ? Histogram.getDefaultInstance() : tokenLengthHistogram_;
  }
  /**
   * <pre>
   * Histogram containing the distribution of token lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
   */
  @Override
  public HistogramOrBuilder getTokenLengthHistogramOrBuilder() {
    return getTokenLengthHistogram();
  }

  public static final int MIN_SEQUENCE_LENGTH_FIELD_NUMBER = 10;
  private long minSequenceLength_;
  /**
   * <pre>
   * Min / max sequence lengths.
   * </pre>
   *
   * <code>int64 min_sequence_length = 10;</code>
   * @return The minSequenceLength.
   */
  @Override
  public long getMinSequenceLength() {
    return minSequenceLength_;
  }

  public static final int MAX_SEQUENCE_LENGTH_FIELD_NUMBER = 11;
  private long maxSequenceLength_;
  /**
   * <code>int64 max_sequence_length = 11;</code>
   * @return The maxSequenceLength.
   */
  @Override
  public long getMaxSequenceLength() {
    return maxSequenceLength_;
  }

  public static final int SEQUENCE_LENGTH_HISTOGRAM_FIELD_NUMBER = 9;
  private Histogram sequenceLengthHistogram_;
  /**
   * <pre>
   * Histogram containing the distribution of sequence lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
   * @return Whether the sequenceLengthHistogram field is set.
   */
  @Override
  public boolean hasSequenceLengthHistogram() {
    return sequenceLengthHistogram_ != null;
  }
  /**
   * <pre>
   * Histogram containing the distribution of sequence lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
   * @return The sequenceLengthHistogram.
   */
  @Override
  public Histogram getSequenceLengthHistogram() {
    return sequenceLengthHistogram_ == null ? Histogram.getDefaultInstance() : sequenceLengthHistogram_;
  }
  /**
   * <pre>
   * Histogram containing the distribution of sequence lengths.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
   */
  @Override
  public HistogramOrBuilder getSequenceLengthHistogramOrBuilder() {
    return getSequenceLengthHistogram();
  }

  public static final int LOCATION_MISSES_FIELD_NUMBER = 4;
  private long locationMisses_;
  /**
   * <pre>
   * Number of of sequences which do not match the location constraint.
   * </pre>
   *
   * <code>int64 location_misses = 4;</code>
   * @return The locationMisses.
   */
  @Override
  public long getLocationMisses() {
    return locationMisses_;
  }

  public static final int REPORTED_SEQUENCES_FIELD_NUMBER = 5;
  private com.google.protobuf.LazyStringList reportedSequences_;
  /**
   * <pre>
   * Reported sequences that are sampled from the input and have small
   * avg_token_length, low feature converage, or do not match the location
   * regex.
   * </pre>
   *
   * <code>repeated string reported_sequences = 5;</code>
   * @return A list containing the reportedSequences.
   */
  public com.google.protobuf.ProtocolStringList
      getReportedSequencesList() {
    return reportedSequences_;
  }
  /**
   * <pre>
   * Reported sequences that are sampled from the input and have small
   * avg_token_length, low feature converage, or do not match the location
   * regex.
   * </pre>
   *
   * <code>repeated string reported_sequences = 5;</code>
   * @return The count of reportedSequences.
   */
  public int getReportedSequencesCount() {
    return reportedSequences_.size();
  }
  /**
   * <pre>
   * Reported sequences that are sampled from the input and have small
   * avg_token_length, low feature converage, or do not match the location
   * regex.
   * </pre>
   *
   * <code>repeated string reported_sequences = 5;</code>
   * @param index The index of the element to return.
   * @return The reportedSequences at the given index.
   */
  public String getReportedSequences(int index) {
    return reportedSequences_.get(index);
  }
  /**
   * <pre>
   * Reported sequences that are sampled from the input and have small
   * avg_token_length, low feature converage, or do not match the location
   * regex.
   * </pre>
   *
   * <code>repeated string reported_sequences = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the reportedSequences at the given index.
   */
  public com.google.protobuf.ByteString
      getReportedSequencesBytes(int index) {
    return reportedSequences_.getByteString(index);
  }

  public static final int TOKEN_STATISTICS_FIELD_NUMBER = 6;
  private java.util.List<TokenStatistics> tokenStatistics_;
  /**
   * <pre>
   * Statistics for specified tokens. TokenStatistics are only reported for
   * tokens specified in SequenceValueConstraints in the schema.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
   */
  @Override
  public java.util.List<TokenStatistics> getTokenStatisticsList() {
    return tokenStatistics_;
  }
  /**
   * <pre>
   * Statistics for specified tokens. TokenStatistics are only reported for
   * tokens specified in SequenceValueConstraints in the schema.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
   */
  @Override
  public java.util.List<? extends TokenStatisticsOrBuilder>
      getTokenStatisticsOrBuilderList() {
    return tokenStatistics_;
  }
  /**
   * <pre>
   * Statistics for specified tokens. TokenStatistics are only reported for
   * tokens specified in SequenceValueConstraints in the schema.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
   */
  @Override
  public int getTokenStatisticsCount() {
    return tokenStatistics_.size();
  }
  /**
   * <pre>
   * Statistics for specified tokens. TokenStatistics are only reported for
   * tokens specified in SequenceValueConstraints in the schema.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
   */
  @Override
  public TokenStatistics getTokenStatistics(int index) {
    return tokenStatistics_.get(index);
  }
  /**
   * <pre>
   * Statistics for specified tokens. TokenStatistics are only reported for
   * tokens specified in SequenceValueConstraints in the schema.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
   */
  @Override
  public TokenStatisticsOrBuilder getTokenStatisticsOrBuilder(
      int index) {
    return tokenStatistics_.get(index);
  }

  public static final int RANK_HISTOGRAM_FIELD_NUMBER = 7;
  private RankHistogram rankHistogram_;
  /**
   * <pre>
   * The rank histogram for the tokens of the feature.
   * The rank is used to measure of how commonly the token is found in the
   * dataset. The most common token would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
   * @return Whether the rankHistogram field is set.
   */
  @Override
  public boolean hasRankHistogram() {
    return rankHistogram_ != null;
  }
  /**
   * <pre>
   * The rank histogram for the tokens of the feature.
   * The rank is used to measure of how commonly the token is found in the
   * dataset. The most common token would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
   * @return The rankHistogram.
   */
  @Override
  public RankHistogram getRankHistogram() {
    return rankHistogram_ == null ? RankHistogram.getDefaultInstance() : rankHistogram_;
  }
  /**
   * <pre>
   * The rank histogram for the tokens of the feature.
   * The rank is used to measure of how commonly the token is found in the
   * dataset. The most common token would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
   */
  @Override
  public RankHistogramOrBuilder getRankHistogramOrBuilder() {
    return getRankHistogram();
  }

  public static final int WEIGHTED_NL_STATISTICS_FIELD_NUMBER = 8;
  private WeightedNaturalLanguageStatistics weightedNlStatistics_;
  /**
   * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
   * @return Whether the weightedNlStatistics field is set.
   */
  @Override
  public boolean hasWeightedNlStatistics() {
    return weightedNlStatistics_ != null;
  }
  /**
   * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
   * @return The weightedNlStatistics.
   */
  @Override
  public WeightedNaturalLanguageStatistics getWeightedNlStatistics() {
    return weightedNlStatistics_ == null ? WeightedNaturalLanguageStatistics.getDefaultInstance() : weightedNlStatistics_;
  }
  /**
   * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
   */
  @Override
  public WeightedNaturalLanguageStatisticsOrBuilder getWeightedNlStatisticsOrBuilder() {
    return getWeightedNlStatistics();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (Double.doubleToRawLongBits(featureCoverage_) != 0) {
      output.writeDouble(1, featureCoverage_);
    }
    if (Double.doubleToRawLongBits(avgTokenLength_) != 0) {
      output.writeDouble(2, avgTokenLength_);
    }
    if (tokenLengthHistogram_ != null) {
      output.writeMessage(3, getTokenLengthHistogram());
    }
    if (locationMisses_ != 0L) {
      output.writeInt64(4, locationMisses_);
    }
    for (int i = 0; i < reportedSequences_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, reportedSequences_.getRaw(i));
    }
    for (int i = 0; i < tokenStatistics_.size(); i++) {
      output.writeMessage(6, tokenStatistics_.get(i));
    }
    if (rankHistogram_ != null) {
      output.writeMessage(7, getRankHistogram());
    }
    if (weightedNlStatistics_ != null) {
      output.writeMessage(8, getWeightedNlStatistics());
    }
    if (sequenceLengthHistogram_ != null) {
      output.writeMessage(9, getSequenceLengthHistogram());
    }
    if (minSequenceLength_ != 0L) {
      output.writeInt64(10, minSequenceLength_);
    }
    if (maxSequenceLength_ != 0L) {
      output.writeInt64(11, maxSequenceLength_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (Double.doubleToRawLongBits(featureCoverage_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, featureCoverage_);
    }
    if (Double.doubleToRawLongBits(avgTokenLength_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, avgTokenLength_);
    }
    if (tokenLengthHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTokenLengthHistogram());
    }
    if (locationMisses_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, locationMisses_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < reportedSequences_.size(); i++) {
        dataSize += GeneratedMessageV3.computeStringSizeNoTag(reportedSequences_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getReportedSequencesList().size();
    }
    for (int i = 0; i < tokenStatistics_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, tokenStatistics_.get(i));
    }
    if (rankHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getRankHistogram());
    }
    if (weightedNlStatistics_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getWeightedNlStatistics());
    }
    if (sequenceLengthHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getSequenceLengthHistogram());
    }
    if (minSequenceLength_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, minSequenceLength_);
    }
    if (maxSequenceLength_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, maxSequenceLength_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof NaturalLanguageStatistics)) {
      return super.equals(obj);
    }
    NaturalLanguageStatistics other = (NaturalLanguageStatistics) obj;

    if (Double.doubleToLongBits(getFeatureCoverage())
        != Double.doubleToLongBits(
            other.getFeatureCoverage())) return false;
    if (Double.doubleToLongBits(getAvgTokenLength())
        != Double.doubleToLongBits(
            other.getAvgTokenLength())) return false;
    if (hasTokenLengthHistogram() != other.hasTokenLengthHistogram()) return false;
    if (hasTokenLengthHistogram()) {
      if (!getTokenLengthHistogram()
          .equals(other.getTokenLengthHistogram())) return false;
    }
    if (getMinSequenceLength()
        != other.getMinSequenceLength()) return false;
    if (getMaxSequenceLength()
        != other.getMaxSequenceLength()) return false;
    if (hasSequenceLengthHistogram() != other.hasSequenceLengthHistogram()) return false;
    if (hasSequenceLengthHistogram()) {
      if (!getSequenceLengthHistogram()
          .equals(other.getSequenceLengthHistogram())) return false;
    }
    if (getLocationMisses()
        != other.getLocationMisses()) return false;
    if (!getReportedSequencesList()
        .equals(other.getReportedSequencesList())) return false;
    if (!getTokenStatisticsList()
        .equals(other.getTokenStatisticsList())) return false;
    if (hasRankHistogram() != other.hasRankHistogram()) return false;
    if (hasRankHistogram()) {
      if (!getRankHistogram()
          .equals(other.getRankHistogram())) return false;
    }
    if (hasWeightedNlStatistics() != other.hasWeightedNlStatistics()) return false;
    if (hasWeightedNlStatistics()) {
      if (!getWeightedNlStatistics()
          .equals(other.getWeightedNlStatistics())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FEATURE_COVERAGE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getFeatureCoverage()));
    hash = (37 * hash) + AVG_TOKEN_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getAvgTokenLength()));
    if (hasTokenLengthHistogram()) {
      hash = (37 * hash) + TOKEN_LENGTH_HISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getTokenLengthHistogram().hashCode();
    }
    hash = (37 * hash) + MIN_SEQUENCE_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinSequenceLength());
    hash = (37 * hash) + MAX_SEQUENCE_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMaxSequenceLength());
    if (hasSequenceLengthHistogram()) {
      hash = (37 * hash) + SEQUENCE_LENGTH_HISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getSequenceLengthHistogram().hashCode();
    }
    hash = (37 * hash) + LOCATION_MISSES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLocationMisses());
    if (getReportedSequencesCount() > 0) {
      hash = (37 * hash) + REPORTED_SEQUENCES_FIELD_NUMBER;
      hash = (53 * hash) + getReportedSequencesList().hashCode();
    }
    if (getTokenStatisticsCount() > 0) {
      hash = (37 * hash) + TOKEN_STATISTICS_FIELD_NUMBER;
      hash = (53 * hash) + getTokenStatisticsList().hashCode();
    }
    if (hasRankHistogram()) {
      hash = (37 * hash) + RANK_HISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getRankHistogram().hashCode();
    }
    if (hasWeightedNlStatistics()) {
      hash = (37 * hash) + WEIGHTED_NL_STATISTICS_FIELD_NUMBER;
      hash = (53 * hash) + getWeightedNlStatistics().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static NaturalLanguageStatistics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NaturalLanguageStatistics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NaturalLanguageStatistics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NaturalLanguageStatistics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NaturalLanguageStatistics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NaturalLanguageStatistics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NaturalLanguageStatistics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static NaturalLanguageStatistics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static NaturalLanguageStatistics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static NaturalLanguageStatistics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static NaturalLanguageStatistics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static NaturalLanguageStatistics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(NaturalLanguageStatistics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Statistics for a feature containing a NL domain.
   * </pre>
   *
   * Protobuf type {@code tensorflow.metadata.v0.NaturalLanguageStatistics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.metadata.v0.NaturalLanguageStatistics)
      NaturalLanguageStatisticsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              NaturalLanguageStatistics.class, Builder.class);
    }

    // Construct using org.tensorflow.metadata.v0.NaturalLanguageStatistics.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTokenStatisticsFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      featureCoverage_ = 0D;

      avgTokenLength_ = 0D;

      if (tokenLengthHistogramBuilder_ == null) {
        tokenLengthHistogram_ = null;
      } else {
        tokenLengthHistogram_ = null;
        tokenLengthHistogramBuilder_ = null;
      }
      minSequenceLength_ = 0L;

      maxSequenceLength_ = 0L;

      if (sequenceLengthHistogramBuilder_ == null) {
        sequenceLengthHistogram_ = null;
      } else {
        sequenceLengthHistogram_ = null;
        sequenceLengthHistogramBuilder_ = null;
      }
      locationMisses_ = 0L;

      reportedSequences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (tokenStatisticsBuilder_ == null) {
        tokenStatistics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        tokenStatisticsBuilder_.clear();
      }
      if (rankHistogramBuilder_ == null) {
        rankHistogram_ = null;
      } else {
        rankHistogram_ = null;
        rankHistogramBuilder_ = null;
      }
      if (weightedNlStatisticsBuilder_ == null) {
        weightedNlStatistics_ = null;
      } else {
        weightedNlStatistics_ = null;
        weightedNlStatisticsBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Statistics.internal_static_tensorflow_metadata_v0_NaturalLanguageStatistics_descriptor;
    }

    @Override
    public NaturalLanguageStatistics getDefaultInstanceForType() {
      return NaturalLanguageStatistics.getDefaultInstance();
    }

    @Override
    public NaturalLanguageStatistics build() {
      NaturalLanguageStatistics result = buildPartial();
      if (!result.isInitialized()) {
        throw Builder.newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public NaturalLanguageStatistics buildPartial() {
      NaturalLanguageStatistics result = new NaturalLanguageStatistics(this);
      int from_bitField0_ = bitField0_;
      result.featureCoverage_ = featureCoverage_;
      result.avgTokenLength_ = avgTokenLength_;
      if (tokenLengthHistogramBuilder_ == null) {
        result.tokenLengthHistogram_ = tokenLengthHistogram_;
      } else {
        result.tokenLengthHistogram_ = tokenLengthHistogramBuilder_.build();
      }
      result.minSequenceLength_ = minSequenceLength_;
      result.maxSequenceLength_ = maxSequenceLength_;
      if (sequenceLengthHistogramBuilder_ == null) {
        result.sequenceLengthHistogram_ = sequenceLengthHistogram_;
      } else {
        result.sequenceLengthHistogram_ = sequenceLengthHistogramBuilder_.build();
      }
      result.locationMisses_ = locationMisses_;
      if (((bitField0_ & 0x00000001) != 0)) {
        reportedSequences_ = reportedSequences_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.reportedSequences_ = reportedSequences_;
      if (tokenStatisticsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          tokenStatistics_ = java.util.Collections.unmodifiableList(tokenStatistics_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tokenStatistics_ = tokenStatistics_;
      } else {
        result.tokenStatistics_ = tokenStatisticsBuilder_.build();
      }
      if (rankHistogramBuilder_ == null) {
        result.rankHistogram_ = rankHistogram_;
      } else {
        result.rankHistogram_ = rankHistogramBuilder_.build();
      }
      if (weightedNlStatisticsBuilder_ == null) {
        result.weightedNlStatistics_ = weightedNlStatistics_;
      } else {
        result.weightedNlStatistics_ = weightedNlStatisticsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof NaturalLanguageStatistics) {
        return mergeFrom((NaturalLanguageStatistics)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(NaturalLanguageStatistics other) {
      if (other == NaturalLanguageStatistics.getDefaultInstance()) return this;
      if (other.getFeatureCoverage() != 0D) {
        setFeatureCoverage(other.getFeatureCoverage());
      }
      if (other.getAvgTokenLength() != 0D) {
        setAvgTokenLength(other.getAvgTokenLength());
      }
      if (other.hasTokenLengthHistogram()) {
        mergeTokenLengthHistogram(other.getTokenLengthHistogram());
      }
      if (other.getMinSequenceLength() != 0L) {
        setMinSequenceLength(other.getMinSequenceLength());
      }
      if (other.getMaxSequenceLength() != 0L) {
        setMaxSequenceLength(other.getMaxSequenceLength());
      }
      if (other.hasSequenceLengthHistogram()) {
        mergeSequenceLengthHistogram(other.getSequenceLengthHistogram());
      }
      if (other.getLocationMisses() != 0L) {
        setLocationMisses(other.getLocationMisses());
      }
      if (!other.reportedSequences_.isEmpty()) {
        if (reportedSequences_.isEmpty()) {
          reportedSequences_ = other.reportedSequences_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureReportedSequencesIsMutable();
          reportedSequences_.addAll(other.reportedSequences_);
        }
        onChanged();
      }
      if (tokenStatisticsBuilder_ == null) {
        if (!other.tokenStatistics_.isEmpty()) {
          if (tokenStatistics_.isEmpty()) {
            tokenStatistics_ = other.tokenStatistics_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTokenStatisticsIsMutable();
            tokenStatistics_.addAll(other.tokenStatistics_);
          }
          onChanged();
        }
      } else {
        if (!other.tokenStatistics_.isEmpty()) {
          if (tokenStatisticsBuilder_.isEmpty()) {
            tokenStatisticsBuilder_.dispose();
            tokenStatisticsBuilder_ = null;
            tokenStatistics_ = other.tokenStatistics_;
            bitField0_ = (bitField0_ & ~0x00000002);
            tokenStatisticsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTokenStatisticsFieldBuilder() : null;
          } else {
            tokenStatisticsBuilder_.addAllMessages(other.tokenStatistics_);
          }
        }
      }
      if (other.hasRankHistogram()) {
        mergeRankHistogram(other.getRankHistogram());
      }
      if (other.hasWeightedNlStatistics()) {
        mergeWeightedNlStatistics(other.getWeightedNlStatistics());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      NaturalLanguageStatistics parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (NaturalLanguageStatistics) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double featureCoverage_ ;
    /**
     * <pre>
     * Fraction of feature input tokens considered in-vocab.
     * </pre>
     *
     * <code>double feature_coverage = 1;</code>
     * @return The featureCoverage.
     */
    @Override
    public double getFeatureCoverage() {
      return featureCoverage_;
    }
    /**
     * <pre>
     * Fraction of feature input tokens considered in-vocab.
     * </pre>
     *
     * <code>double feature_coverage = 1;</code>
     * @param value The featureCoverage to set.
     * @return This builder for chaining.
     */
    public Builder setFeatureCoverage(double value) {
      
      featureCoverage_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fraction of feature input tokens considered in-vocab.
     * </pre>
     *
     * <code>double feature_coverage = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearFeatureCoverage() {
      
      featureCoverage_ = 0D;
      onChanged();
      return this;
    }

    private double avgTokenLength_ ;
    /**
     * <pre>
     * Average token length of tokens used by the feature.
     * </pre>
     *
     * <code>double avg_token_length = 2;</code>
     * @return The avgTokenLength.
     */
    @Override
    public double getAvgTokenLength() {
      return avgTokenLength_;
    }
    /**
     * <pre>
     * Average token length of tokens used by the feature.
     * </pre>
     *
     * <code>double avg_token_length = 2;</code>
     * @param value The avgTokenLength to set.
     * @return This builder for chaining.
     */
    public Builder setAvgTokenLength(double value) {
      
      avgTokenLength_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Average token length of tokens used by the feature.
     * </pre>
     *
     * <code>double avg_token_length = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvgTokenLength() {
      
      avgTokenLength_ = 0D;
      onChanged();
      return this;
    }

    private Histogram tokenLengthHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder> tokenLengthHistogramBuilder_;
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     * @return Whether the tokenLengthHistogram field is set.
     */
    public boolean hasTokenLengthHistogram() {
      return tokenLengthHistogramBuilder_ != null || tokenLengthHistogram_ != null;
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     * @return The tokenLengthHistogram.
     */
    public Histogram getTokenLengthHistogram() {
      if (tokenLengthHistogramBuilder_ == null) {
        return tokenLengthHistogram_ == null ? Histogram.getDefaultInstance() : tokenLengthHistogram_;
      } else {
        return tokenLengthHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public Builder setTokenLengthHistogram(Histogram value) {
      if (tokenLengthHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tokenLengthHistogram_ = value;
        onChanged();
      } else {
        tokenLengthHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public Builder setTokenLengthHistogram(
        Histogram.Builder builderForValue) {
      if (tokenLengthHistogramBuilder_ == null) {
        tokenLengthHistogram_ = builderForValue.build();
        onChanged();
      } else {
        tokenLengthHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public Builder mergeTokenLengthHistogram(Histogram value) {
      if (tokenLengthHistogramBuilder_ == null) {
        if (tokenLengthHistogram_ != null) {
          tokenLengthHistogram_ =
            Histogram.newBuilder(tokenLengthHistogram_).mergeFrom(value).buildPartial();
        } else {
          tokenLengthHistogram_ = value;
        }
        onChanged();
      } else {
        tokenLengthHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public Builder clearTokenLengthHistogram() {
      if (tokenLengthHistogramBuilder_ == null) {
        tokenLengthHistogram_ = null;
        onChanged();
      } else {
        tokenLengthHistogram_ = null;
        tokenLengthHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public Histogram.Builder getTokenLengthHistogramBuilder() {
      
      onChanged();
      return getTokenLengthHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    public HistogramOrBuilder getTokenLengthHistogramOrBuilder() {
      if (tokenLengthHistogramBuilder_ != null) {
        return tokenLengthHistogramBuilder_.getMessageOrBuilder();
      } else {
        return tokenLengthHistogram_ == null ?
            Histogram.getDefaultInstance() : tokenLengthHistogram_;
      }
    }
    /**
     * <pre>
     * Histogram containing the distribution of token lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram token_length_histogram = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder>
        getTokenLengthHistogramFieldBuilder() {
      if (tokenLengthHistogramBuilder_ == null) {
        tokenLengthHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Histogram, Histogram.Builder, HistogramOrBuilder>(
                getTokenLengthHistogram(),
                getParentForChildren(),
                isClean());
        tokenLengthHistogram_ = null;
      }
      return tokenLengthHistogramBuilder_;
    }

    private long minSequenceLength_ ;
    /**
     * <pre>
     * Min / max sequence lengths.
     * </pre>
     *
     * <code>int64 min_sequence_length = 10;</code>
     * @return The minSequenceLength.
     */
    @Override
    public long getMinSequenceLength() {
      return minSequenceLength_;
    }
    /**
     * <pre>
     * Min / max sequence lengths.
     * </pre>
     *
     * <code>int64 min_sequence_length = 10;</code>
     * @param value The minSequenceLength to set.
     * @return This builder for chaining.
     */
    public Builder setMinSequenceLength(long value) {
      
      minSequenceLength_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Min / max sequence lengths.
     * </pre>
     *
     * <code>int64 min_sequence_length = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinSequenceLength() {
      
      minSequenceLength_ = 0L;
      onChanged();
      return this;
    }

    private long maxSequenceLength_ ;
    /**
     * <code>int64 max_sequence_length = 11;</code>
     * @return The maxSequenceLength.
     */
    @Override
    public long getMaxSequenceLength() {
      return maxSequenceLength_;
    }
    /**
     * <code>int64 max_sequence_length = 11;</code>
     * @param value The maxSequenceLength to set.
     * @return This builder for chaining.
     */
    public Builder setMaxSequenceLength(long value) {
      
      maxSequenceLength_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 max_sequence_length = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxSequenceLength() {
      
      maxSequenceLength_ = 0L;
      onChanged();
      return this;
    }

    private Histogram sequenceLengthHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder> sequenceLengthHistogramBuilder_;
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     * @return Whether the sequenceLengthHistogram field is set.
     */
    public boolean hasSequenceLengthHistogram() {
      return sequenceLengthHistogramBuilder_ != null || sequenceLengthHistogram_ != null;
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     * @return The sequenceLengthHistogram.
     */
    public Histogram getSequenceLengthHistogram() {
      if (sequenceLengthHistogramBuilder_ == null) {
        return sequenceLengthHistogram_ == null ? Histogram.getDefaultInstance() : sequenceLengthHistogram_;
      } else {
        return sequenceLengthHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public Builder setSequenceLengthHistogram(Histogram value) {
      if (sequenceLengthHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sequenceLengthHistogram_ = value;
        onChanged();
      } else {
        sequenceLengthHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public Builder setSequenceLengthHistogram(
        Histogram.Builder builderForValue) {
      if (sequenceLengthHistogramBuilder_ == null) {
        sequenceLengthHistogram_ = builderForValue.build();
        onChanged();
      } else {
        sequenceLengthHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public Builder mergeSequenceLengthHistogram(Histogram value) {
      if (sequenceLengthHistogramBuilder_ == null) {
        if (sequenceLengthHistogram_ != null) {
          sequenceLengthHistogram_ =
            Histogram.newBuilder(sequenceLengthHistogram_).mergeFrom(value).buildPartial();
        } else {
          sequenceLengthHistogram_ = value;
        }
        onChanged();
      } else {
        sequenceLengthHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public Builder clearSequenceLengthHistogram() {
      if (sequenceLengthHistogramBuilder_ == null) {
        sequenceLengthHistogram_ = null;
        onChanged();
      } else {
        sequenceLengthHistogram_ = null;
        sequenceLengthHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public Histogram.Builder getSequenceLengthHistogramBuilder() {
      
      onChanged();
      return getSequenceLengthHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    public HistogramOrBuilder getSequenceLengthHistogramOrBuilder() {
      if (sequenceLengthHistogramBuilder_ != null) {
        return sequenceLengthHistogramBuilder_.getMessageOrBuilder();
      } else {
        return sequenceLengthHistogram_ == null ?
            Histogram.getDefaultInstance() : sequenceLengthHistogram_;
      }
    }
    /**
     * <pre>
     * Histogram containing the distribution of sequence lengths.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.Histogram sequence_length_histogram = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Histogram, Histogram.Builder, HistogramOrBuilder>
        getSequenceLengthHistogramFieldBuilder() {
      if (sequenceLengthHistogramBuilder_ == null) {
        sequenceLengthHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Histogram, Histogram.Builder, HistogramOrBuilder>(
                getSequenceLengthHistogram(),
                getParentForChildren(),
                isClean());
        sequenceLengthHistogram_ = null;
      }
      return sequenceLengthHistogramBuilder_;
    }

    private long locationMisses_ ;
    /**
     * <pre>
     * Number of of sequences which do not match the location constraint.
     * </pre>
     *
     * <code>int64 location_misses = 4;</code>
     * @return The locationMisses.
     */
    @Override
    public long getLocationMisses() {
      return locationMisses_;
    }
    /**
     * <pre>
     * Number of of sequences which do not match the location constraint.
     * </pre>
     *
     * <code>int64 location_misses = 4;</code>
     * @param value The locationMisses to set.
     * @return This builder for chaining.
     */
    public Builder setLocationMisses(long value) {
      
      locationMisses_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of of sequences which do not match the location constraint.
     * </pre>
     *
     * <code>int64 location_misses = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearLocationMisses() {
      
      locationMisses_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList reportedSequences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureReportedSequencesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        reportedSequences_ = new com.google.protobuf.LazyStringArrayList(reportedSequences_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @return A list containing the reportedSequences.
     */
    public com.google.protobuf.ProtocolStringList
        getReportedSequencesList() {
      return reportedSequences_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @return The count of reportedSequences.
     */
    public int getReportedSequencesCount() {
      return reportedSequences_.size();
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param index The index of the element to return.
     * @return The reportedSequences at the given index.
     */
    public String getReportedSequences(int index) {
      return reportedSequences_.get(index);
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the reportedSequences at the given index.
     */
    public com.google.protobuf.ByteString
        getReportedSequencesBytes(int index) {
      return reportedSequences_.getByteString(index);
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param index The index to set the value at.
     * @param value The reportedSequences to set.
     * @return This builder for chaining.
     */
    public Builder setReportedSequences(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureReportedSequencesIsMutable();
      reportedSequences_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param value The reportedSequences to add.
     * @return This builder for chaining.
     */
    public Builder addReportedSequences(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureReportedSequencesIsMutable();
      reportedSequences_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param values The reportedSequences to add.
     * @return This builder for chaining.
     */
    public Builder addAllReportedSequences(
        Iterable<String> values) {
      ensureReportedSequencesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, reportedSequences_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearReportedSequences() {
      reportedSequences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Reported sequences that are sampled from the input and have small
     * avg_token_length, low feature converage, or do not match the location
     * regex.
     * </pre>
     *
     * <code>repeated string reported_sequences = 5;</code>
     * @param value The bytes of the reportedSequences to add.
     * @return This builder for chaining.
     */
    public Builder addReportedSequencesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  AbstractMessageLite.checkByteStringIsUtf8(value);
      ensureReportedSequencesIsMutable();
      reportedSequences_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<TokenStatistics> tokenStatistics_ =
      java.util.Collections.emptyList();
    private void ensureTokenStatisticsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        tokenStatistics_ = new java.util.ArrayList<TokenStatistics>(tokenStatistics_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        TokenStatistics, TokenStatistics.Builder, TokenStatisticsOrBuilder> tokenStatisticsBuilder_;

    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public java.util.List<TokenStatistics> getTokenStatisticsList() {
      if (tokenStatisticsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tokenStatistics_);
      } else {
        return tokenStatisticsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public int getTokenStatisticsCount() {
      if (tokenStatisticsBuilder_ == null) {
        return tokenStatistics_.size();
      } else {
        return tokenStatisticsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public TokenStatistics getTokenStatistics(int index) {
      if (tokenStatisticsBuilder_ == null) {
        return tokenStatistics_.get(index);
      } else {
        return tokenStatisticsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder setTokenStatistics(
        int index, TokenStatistics value) {
      if (tokenStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.set(index, value);
        onChanged();
      } else {
        tokenStatisticsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder setTokenStatistics(
        int index, TokenStatistics.Builder builderForValue) {
      if (tokenStatisticsBuilder_ == null) {
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.set(index, builderForValue.build());
        onChanged();
      } else {
        tokenStatisticsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder addTokenStatistics(TokenStatistics value) {
      if (tokenStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.add(value);
        onChanged();
      } else {
        tokenStatisticsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder addTokenStatistics(
        int index, TokenStatistics value) {
      if (tokenStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.add(index, value);
        onChanged();
      } else {
        tokenStatisticsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder addTokenStatistics(
        TokenStatistics.Builder builderForValue) {
      if (tokenStatisticsBuilder_ == null) {
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.add(builderForValue.build());
        onChanged();
      } else {
        tokenStatisticsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder addTokenStatistics(
        int index, TokenStatistics.Builder builderForValue) {
      if (tokenStatisticsBuilder_ == null) {
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.add(index, builderForValue.build());
        onChanged();
      } else {
        tokenStatisticsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder addAllTokenStatistics(
        Iterable<? extends TokenStatistics> values) {
      if (tokenStatisticsBuilder_ == null) {
        ensureTokenStatisticsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tokenStatistics_);
        onChanged();
      } else {
        tokenStatisticsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder clearTokenStatistics() {
      if (tokenStatisticsBuilder_ == null) {
        tokenStatistics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        tokenStatisticsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public Builder removeTokenStatistics(int index) {
      if (tokenStatisticsBuilder_ == null) {
        ensureTokenStatisticsIsMutable();
        tokenStatistics_.remove(index);
        onChanged();
      } else {
        tokenStatisticsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public TokenStatistics.Builder getTokenStatisticsBuilder(
        int index) {
      return getTokenStatisticsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public TokenStatisticsOrBuilder getTokenStatisticsOrBuilder(
        int index) {
      if (tokenStatisticsBuilder_ == null) {
        return tokenStatistics_.get(index);  } else {
        return tokenStatisticsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public java.util.List<? extends TokenStatisticsOrBuilder>
         getTokenStatisticsOrBuilderList() {
      if (tokenStatisticsBuilder_ != null) {
        return tokenStatisticsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tokenStatistics_);
      }
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public TokenStatistics.Builder addTokenStatisticsBuilder() {
      return getTokenStatisticsFieldBuilder().addBuilder(
          TokenStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public TokenStatistics.Builder addTokenStatisticsBuilder(
        int index) {
      return getTokenStatisticsFieldBuilder().addBuilder(
          index, TokenStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Statistics for specified tokens. TokenStatistics are only reported for
     * tokens specified in SequenceValueConstraints in the schema.
     * </pre>
     *
     * <code>repeated .tensorflow.metadata.v0.NaturalLanguageStatistics.TokenStatistics token_statistics = 6;</code>
     */
    public java.util.List<TokenStatistics.Builder>
         getTokenStatisticsBuilderList() {
      return getTokenStatisticsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        TokenStatistics, TokenStatistics.Builder, TokenStatisticsOrBuilder>
        getTokenStatisticsFieldBuilder() {
      if (tokenStatisticsBuilder_ == null) {
        tokenStatisticsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            TokenStatistics, TokenStatistics.Builder, TokenStatisticsOrBuilder>(
                tokenStatistics_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        tokenStatistics_ = null;
      }
      return tokenStatisticsBuilder_;
    }

    private RankHistogram rankHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        RankHistogram, RankHistogram.Builder, RankHistogramOrBuilder> rankHistogramBuilder_;
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     * @return Whether the rankHistogram field is set.
     */
    public boolean hasRankHistogram() {
      return rankHistogramBuilder_ != null || rankHistogram_ != null;
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     * @return The rankHistogram.
     */
    public RankHistogram getRankHistogram() {
      if (rankHistogramBuilder_ == null) {
        return rankHistogram_ == null ? RankHistogram.getDefaultInstance() : rankHistogram_;
      } else {
        return rankHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public Builder setRankHistogram(RankHistogram value) {
      if (rankHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rankHistogram_ = value;
        onChanged();
      } else {
        rankHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public Builder setRankHistogram(
        RankHistogram.Builder builderForValue) {
      if (rankHistogramBuilder_ == null) {
        rankHistogram_ = builderForValue.build();
        onChanged();
      } else {
        rankHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public Builder mergeRankHistogram(RankHistogram value) {
      if (rankHistogramBuilder_ == null) {
        if (rankHistogram_ != null) {
          rankHistogram_ =
            RankHistogram.newBuilder(rankHistogram_).mergeFrom(value).buildPartial();
        } else {
          rankHistogram_ = value;
        }
        onChanged();
      } else {
        rankHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public Builder clearRankHistogram() {
      if (rankHistogramBuilder_ == null) {
        rankHistogram_ = null;
        onChanged();
      } else {
        rankHistogram_ = null;
        rankHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public RankHistogram.Builder getRankHistogramBuilder() {
      
      onChanged();
      return getRankHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    public RankHistogramOrBuilder getRankHistogramOrBuilder() {
      if (rankHistogramBuilder_ != null) {
        return rankHistogramBuilder_.getMessageOrBuilder();
      } else {
        return rankHistogram_ == null ?
            RankHistogram.getDefaultInstance() : rankHistogram_;
      }
    }
    /**
     * <pre>
     * The rank histogram for the tokens of the feature.
     * The rank is used to measure of how commonly the token is found in the
     * dataset. The most common token would have a rank of 1, with the second-most
     * common value having a rank of 2, and so on.
     * </pre>
     *
     * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        RankHistogram, RankHistogram.Builder, RankHistogramOrBuilder>
        getRankHistogramFieldBuilder() {
      if (rankHistogramBuilder_ == null) {
        rankHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            RankHistogram, RankHistogram.Builder, RankHistogramOrBuilder>(
                getRankHistogram(),
                getParentForChildren(),
                isClean());
        rankHistogram_ = null;
      }
      return rankHistogramBuilder_;
    }

    private WeightedNaturalLanguageStatistics weightedNlStatistics_;
    private com.google.protobuf.SingleFieldBuilderV3<
        WeightedNaturalLanguageStatistics, WeightedNaturalLanguageStatistics.Builder, WeightedNaturalLanguageStatisticsOrBuilder> weightedNlStatisticsBuilder_;
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     * @return Whether the weightedNlStatistics field is set.
     */
    public boolean hasWeightedNlStatistics() {
      return weightedNlStatisticsBuilder_ != null || weightedNlStatistics_ != null;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     * @return The weightedNlStatistics.
     */
    public WeightedNaturalLanguageStatistics getWeightedNlStatistics() {
      if (weightedNlStatisticsBuilder_ == null) {
        return weightedNlStatistics_ == null ? WeightedNaturalLanguageStatistics.getDefaultInstance() : weightedNlStatistics_;
      } else {
        return weightedNlStatisticsBuilder_.getMessage();
      }
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public Builder setWeightedNlStatistics(WeightedNaturalLanguageStatistics value) {
      if (weightedNlStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        weightedNlStatistics_ = value;
        onChanged();
      } else {
        weightedNlStatisticsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public Builder setWeightedNlStatistics(
        WeightedNaturalLanguageStatistics.Builder builderForValue) {
      if (weightedNlStatisticsBuilder_ == null) {
        weightedNlStatistics_ = builderForValue.build();
        onChanged();
      } else {
        weightedNlStatisticsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public Builder mergeWeightedNlStatistics(WeightedNaturalLanguageStatistics value) {
      if (weightedNlStatisticsBuilder_ == null) {
        if (weightedNlStatistics_ != null) {
          weightedNlStatistics_ =
            WeightedNaturalLanguageStatistics.newBuilder(weightedNlStatistics_).mergeFrom(value).buildPartial();
        } else {
          weightedNlStatistics_ = value;
        }
        onChanged();
      } else {
        weightedNlStatisticsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public Builder clearWeightedNlStatistics() {
      if (weightedNlStatisticsBuilder_ == null) {
        weightedNlStatistics_ = null;
        onChanged();
      } else {
        weightedNlStatistics_ = null;
        weightedNlStatisticsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public WeightedNaturalLanguageStatistics.Builder getWeightedNlStatisticsBuilder() {
      
      onChanged();
      return getWeightedNlStatisticsFieldBuilder().getBuilder();
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    public WeightedNaturalLanguageStatisticsOrBuilder getWeightedNlStatisticsOrBuilder() {
      if (weightedNlStatisticsBuilder_ != null) {
        return weightedNlStatisticsBuilder_.getMessageOrBuilder();
      } else {
        return weightedNlStatistics_ == null ?
            WeightedNaturalLanguageStatistics.getDefaultInstance() : weightedNlStatistics_;
      }
    }
    /**
     * <code>.tensorflow.metadata.v0.WeightedNaturalLanguageStatistics weighted_nl_statistics = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        WeightedNaturalLanguageStatistics, WeightedNaturalLanguageStatistics.Builder, WeightedNaturalLanguageStatisticsOrBuilder>
        getWeightedNlStatisticsFieldBuilder() {
      if (weightedNlStatisticsBuilder_ == null) {
        weightedNlStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            WeightedNaturalLanguageStatistics, WeightedNaturalLanguageStatistics.Builder, WeightedNaturalLanguageStatisticsOrBuilder>(
                getWeightedNlStatistics(),
                getParentForChildren(),
                isClean());
        weightedNlStatistics_ = null;
      }
      return weightedNlStatisticsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.metadata.v0.NaturalLanguageStatistics)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.metadata.v0.NaturalLanguageStatistics)
  private static final NaturalLanguageStatistics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new NaturalLanguageStatistics();
  }

  public static NaturalLanguageStatistics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NaturalLanguageStatistics>
      PARSER = new com.google.protobuf.AbstractParser<NaturalLanguageStatistics>() {
    @Override
    public NaturalLanguageStatistics parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NaturalLanguageStatistics(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NaturalLanguageStatistics> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<NaturalLanguageStatistics> getParserForType() {
    return PARSER;
  }

  @Override
  public NaturalLanguageStatistics getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

